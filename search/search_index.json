{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Welcome to the t2linux wiki! This wiki contains knowledge about running Linux on Macs with the T2 chip. A list of those devices can be found on Apple's website . Warnings \u00b6 Some kernel versions, notably 5.8.x and 5.9.x are known to have issues. See the releases (those not marked as a pre-release) of aunali1/linux-mbp-arch for ones that have been tested. Keep in mind that some might very have reached their end of life . Ubuntu's GRUB is not booting using the Mac Startup Manager for many users. Thus affected users are advised to install the rEFInd bootloader and boot the kernel using it instead of the Startup Manager. Getting started \u00b6 To get started with an installation, refer to the roadmap . Contact us \u00b6 You may contact us on the Linux on T2 Macs (2018+) Discord Server , where you can find most of the people involved. Contribute \u00b6 Visit the Contribute page for more details. Notable Resources \u00b6 Distributions \u00b6 Different distributions are maintained by different people in their own repositories. If the distribution you want to use has a guide here , it's recommended to follow it instead of the instructions given in one of the repositories or otherwise official documentation by distribution vendor, as it considers T2 support. Arch https://github.com/aunali1/linux-mbp-arch EndeavourOS https://github.com/t2linux/EndeavourOS-ISO-t2 Fedora https://github.com/mikeeq/mbp-fedora Gentoo https://github.com/t2linux/T2-Gentoo-Kernel Manjaro https://github.com/JPyke3/mbp-manjaro Tails https://github.com/T2minator/mbp-tails Ubuntu https://github.com/marcosfad/mbp-ubuntu Kernel Modules \u00b6 Support for hardware is cross distro besides patches to the distribution specific kernel. The following repos contain kernel modules for said support: MacBook Bridge / T2 Linux Driver https://github.com/t2linux/apple-bce-drv Touchbar and Ambient Light https://github.com/t2linux/apple-ib-drv Guides and similar \u00b6 Note that, if you are using one of the distributions listed above, you should follow their install guides rather than the ones listed under this section. However, they might still be important to gain a better general picture or to help with specific issues. List of Mac Model Identifiers on everymac.com Using Luks with the integrated keyboard https://github.com/DimitriDokuchaev/GrubLuksUnlock Adding macOS-like screenshot shortcuts to KDE Plasma https://gist.github.com/networkException/5a68299accc1872749c86301c1449690 Disable thermal throttling (better performance but higher temperatures) https://github.com/yyearth/turnoff-BD-PROCHOT Install a distribution in a virtual machine and copy it to bare metal afterwards https://gist.github.com/Redecorating/c876a4c3b24e47d79c1f921495f62213 (using Pop!_OS as an example) Get SMART information of your Apple Internal SSD using Linux https://gist.github.com/AdityaGarg8/b03e57826213019fbffa747e1c724cac Keyboard related issues https://wiki.archlinux.org/title/Apple_Keyboard Get silent boot experience similar to macOS and Windows on Ubuntu and Arch Linux . Outdated State of Linux on the MacBook Pro (technical documentation) https://github.com/Dunedan/mbp-2016-linux Arch on 2018 MacBook Pro https://gist.github.com/TRPB/437f663b545d23cc8a2073253c774be3 Ubuntu on 16 inch, 2019 MacBook Pro https://gist.github.com/gbrow004/096f845c8fe8d03ef9009fbb87b781a4 Notable Contributors \u00b6 Check out the list of all Notable Contributors here .","title":"Home"},{"location":"#introduction","text":"Welcome to the t2linux wiki! This wiki contains knowledge about running Linux on Macs with the T2 chip. A list of those devices can be found on Apple's website .","title":"Introduction"},{"location":"#warnings","text":"Some kernel versions, notably 5.8.x and 5.9.x are known to have issues. See the releases (those not marked as a pre-release) of aunali1/linux-mbp-arch for ones that have been tested. Keep in mind that some might very have reached their end of life . Ubuntu's GRUB is not booting using the Mac Startup Manager for many users. Thus affected users are advised to install the rEFInd bootloader and boot the kernel using it instead of the Startup Manager.","title":"Warnings"},{"location":"#getting-started","text":"To get started with an installation, refer to the roadmap .","title":"Getting started"},{"location":"#contact-us","text":"You may contact us on the Linux on T2 Macs (2018+) Discord Server , where you can find most of the people involved.","title":"Contact us"},{"location":"#contribute","text":"Visit the Contribute page for more details.","title":"Contribute"},{"location":"#notable-resources","text":"","title":"Notable Resources"},{"location":"#distributions","text":"Different distributions are maintained by different people in their own repositories. If the distribution you want to use has a guide here , it's recommended to follow it instead of the instructions given in one of the repositories or otherwise official documentation by distribution vendor, as it considers T2 support. Arch https://github.com/aunali1/linux-mbp-arch EndeavourOS https://github.com/t2linux/EndeavourOS-ISO-t2 Fedora https://github.com/mikeeq/mbp-fedora Gentoo https://github.com/t2linux/T2-Gentoo-Kernel Manjaro https://github.com/JPyke3/mbp-manjaro Tails https://github.com/T2minator/mbp-tails Ubuntu https://github.com/marcosfad/mbp-ubuntu","title":"Distributions"},{"location":"#kernel-modules","text":"Support for hardware is cross distro besides patches to the distribution specific kernel. The following repos contain kernel modules for said support: MacBook Bridge / T2 Linux Driver https://github.com/t2linux/apple-bce-drv Touchbar and Ambient Light https://github.com/t2linux/apple-ib-drv","title":"Kernel Modules"},{"location":"#guides-and-similar","text":"Note that, if you are using one of the distributions listed above, you should follow their install guides rather than the ones listed under this section. However, they might still be important to gain a better general picture or to help with specific issues. List of Mac Model Identifiers on everymac.com Using Luks with the integrated keyboard https://github.com/DimitriDokuchaev/GrubLuksUnlock Adding macOS-like screenshot shortcuts to KDE Plasma https://gist.github.com/networkException/5a68299accc1872749c86301c1449690 Disable thermal throttling (better performance but higher temperatures) https://github.com/yyearth/turnoff-BD-PROCHOT Install a distribution in a virtual machine and copy it to bare metal afterwards https://gist.github.com/Redecorating/c876a4c3b24e47d79c1f921495f62213 (using Pop!_OS as an example) Get SMART information of your Apple Internal SSD using Linux https://gist.github.com/AdityaGarg8/b03e57826213019fbffa747e1c724cac Keyboard related issues https://wiki.archlinux.org/title/Apple_Keyboard Get silent boot experience similar to macOS and Windows on Ubuntu and Arch Linux . Outdated State of Linux on the MacBook Pro (technical documentation) https://github.com/Dunedan/mbp-2016-linux Arch on 2018 MacBook Pro https://gist.github.com/TRPB/437f663b545d23cc8a2073253c774be3 Ubuntu on 16 inch, 2019 MacBook Pro https://gist.github.com/gbrow004/096f845c8fe8d03ef9009fbb87b781a4","title":"Guides and similar"},{"location":"#notable-contributors","text":"Check out the list of all Notable Contributors here .","title":"Notable Contributors"},{"location":"contribute/","text":"Contribute \u00b6 The T2 project itself currently does not accept financial donations. However, some of the contributors and maintainers of the project do accept donations on their own. You may refer to the Support our maintainers section of this page to get the links of the same. The best way of donation which we believe is in the form of skill. If you think you have the potential to help us in pushing the project further like fixing bugs, adding new features etc., you are free to do so. For this, you may contact our discord server, where other members of this organization are present. Support our maintainers \u00b6 Here is the list and links to donate some of our maintainers. MCMrARM - Author of the apple-bce driver . Donate via Paypal . JPyke3 - Played major role in getting Manjaro working on T2 Macs. Donate via Patreon or On Chain . marcosfad - Played major role in getting Ubuntu working on T2 Macs. Donate via Paypal or GitHub Sponsors . NoaHimesaka1873 - Currently maintains boot images for Arch, EndeavourOS, and Manjaro. Also maintains kernel for Manjaro too. Donate via GitHub Sponsors or Toss (South Korea residents only) . Redecorating - Currently maintains Arch kernel package, has written T2 related kernel patches and worked on T2 related kernel regressions. Donate via Paypal . AdityaGarg8 - Current maintainer of Ubuntu. Has also helped in writing T2 kernel patches and upstreaming various patches. Donate via Amazon Gift Cards India ( Link for Indians , Link for other countries ). The cards can be emailed to gargaditya08@live.com or via the discord.","title":"Contribute"},{"location":"contribute/#contribute","text":"The T2 project itself currently does not accept financial donations. However, some of the contributors and maintainers of the project do accept donations on their own. You may refer to the Support our maintainers section of this page to get the links of the same. The best way of donation which we believe is in the form of skill. If you think you have the potential to help us in pushing the project further like fixing bugs, adding new features etc., you are free to do so. For this, you may contact our discord server, where other members of this organization are present.","title":"Contribute"},{"location":"contribute/#support-our-maintainers","text":"Here is the list and links to donate some of our maintainers. MCMrARM - Author of the apple-bce driver . Donate via Paypal . JPyke3 - Played major role in getting Manjaro working on T2 Macs. Donate via Patreon or On Chain . marcosfad - Played major role in getting Ubuntu working on T2 Macs. Donate via Paypal or GitHub Sponsors . NoaHimesaka1873 - Currently maintains boot images for Arch, EndeavourOS, and Manjaro. Also maintains kernel for Manjaro too. Donate via GitHub Sponsors or Toss (South Korea residents only) . Redecorating - Currently maintains Arch kernel package, has written T2 related kernel patches and worked on T2 related kernel regressions. Donate via Paypal . AdityaGarg8 - Current maintainer of Ubuntu. Has also helped in writing T2 kernel patches and upstreaming various patches. Donate via Amazon Gift Cards India ( Link for Indians , Link for other countries ). The cards can be emailed to gargaditya08@live.com or via the discord.","title":"Support our maintainers"},{"location":"notable-contributors/","text":"All Notable Contributors \u00b6 This page contains all Notable Contributors for the Linux on T2 project. If there is someone missing that you think should be on this list, send a PR on the wiki repository. aunali1 (Arch Linux and Kernel Module work) https://github.com/aunali1 JPyke3 (Manjaro) https://github.com/JPyke3 marcosfad (Ubuntu) https://github.com/marcosfad MCMrARM (MacBook Bridge / T2 Linux Driver) https://github.com/MCMrARM mikeeq (Fedora) https://github.com/mikeeq networkException (Wiki maintenance and mbpfan fork for T2) https://github.com/networkException Redecorating (Wiki maintenance and providing compiled kernels with patch for wifi) https://github.com/Redecorating roadrunner2 (Touchbar and Ambient Light Driver) https://github.com/roadrunner2 AdityaGarg8 (Ubuntu and wiki maintenance) https://github.com/AdityaGarg8 EmreTech (Gentoo) https://github.com/EmreTech T2minator (Tails) https://github.com/T2minator NoaHimesaka1873 (Arch, Manjaro and EndeavourOS) https://github.com/NoaHimesaka1873 The Asahi Linux Contributors (Wi-Fi) https://asahilinux.org/","title":"Notable Contributors"},{"location":"notable-contributors/#all-notable-contributors","text":"This page contains all Notable Contributors for the Linux on T2 project. If there is someone missing that you think should be on this list, send a PR on the wiki repository. aunali1 (Arch Linux and Kernel Module work) https://github.com/aunali1 JPyke3 (Manjaro) https://github.com/JPyke3 marcosfad (Ubuntu) https://github.com/marcosfad MCMrARM (MacBook Bridge / T2 Linux Driver) https://github.com/MCMrARM mikeeq (Fedora) https://github.com/mikeeq networkException (Wiki maintenance and mbpfan fork for T2) https://github.com/networkException Redecorating (Wiki maintenance and providing compiled kernels with patch for wifi) https://github.com/Redecorating roadrunner2 (Touchbar and Ambient Light Driver) https://github.com/roadrunner2 AdityaGarg8 (Ubuntu and wiki maintenance) https://github.com/AdityaGarg8 EmreTech (Gentoo) https://github.com/EmreTech T2minator (Tails) https://github.com/T2minator NoaHimesaka1873 (Arch, Manjaro and EndeavourOS) https://github.com/NoaHimesaka1873 The Asahi Linux Contributors (Wi-Fi) https://asahilinux.org/","title":"All Notable Contributors"},{"location":"roadmap/","text":"Introduction \u00b6 This article is meant to guide users through the wiki by giving an overview over the required steps to get to a working installation. Deciding on the Installation \u00b6 Using Linux on a T2 Mac comes with compromises as well as advantages compared to macOS. You will need to decide for yourself if it its worth it. Your first consideration should be the risk you are taking. Don't worry, nobody has broken their machine so far by installing Linux and by following the guides closely you should be able to get everything working even without a lot of knowledge as well. Still in case something goes wrong we are not responsible for it, we will try our best to help out however. Can I completely remove macOS? \u00b6 While its technically possible to remove macOS entirely, its strongly encouraged to dual boot it with Linux because :- It acts as a backup in case something goes wrong. macOS updates often bring along certain firmware updates, which tend to be useful for Linux as well. Still if you wish to remove macOS completely, it is recommended to create a bootable macOS installer so as to have an option of restoring macOS back. You can also use the Internet Recovery to reinstall macOS, but this has been quite unreliable and slow for a considerable amount of users, thus making the bootable installer method a better one. What works on Linux? \u00b6 Take a look at the state article . It gives a list of roughly what works on Linux and what doesn't. If a specific feature is not listed at all, there is a chance it actually works. Choosing a Distribution \u00b6 While technically it is not a limitation when installing Linux, different distributions do provide different levels of documentation, ease of use and polish. Arch Linux probably has the most documentation, both officially for the whole project in form of the Arch Wiki and in scope of the t2linux wiki with a really detailed and up to date install guide. On top of that there is also a work in progress archinstall script. Keep in mind however that the whole process is done in the command line. Manjaro has a more guided install experience, with a graphical installer and multiple prebuilt ISOs for different desktop environments. Note that Manjaro currently only has 5.7.19 as the latest kernel version. The support period for 5.7.x ended in August 2020. You could install the linux-mbp-arch kernel, which is updated, by following step 8 of the arch install guide , and sudo pacman -S linux-mbp linux-mbp-headers . Ubuntu also has a graphical installer. Additionally, less post configuration work is required as some kernel modules are getting installed automatically. Fedora also has a prebuilt ISO and a graphical installer. Most things work out of the box, though audio and WiFi generally need to be set up as in the guides below. Then they should work flawlessly. If you wish to use another distribution, you can install it normally, also follow the steps to install the kernel yourself manually and follow the post installation steps . Preparing the Installation \u00b6 You will want to look at the wifi guide to check if your model is supported before starting an installation. Based on that information, prepare anything that is needed for installing on Linux. Make sure to keep the wifi firmware, as well as any other files you might want to access after the installation (a password manager database for example) on a medium you can access from Linux. Linux cannot read APFS, the file system macOS uses by default. You will also need to make some space on your hard drive. While its technically possible to install Linux on an external drive, it depends on the install process of the distribution if this is supported. 20 to 40GB should be fine for a base installation. To boot into a live environment, you need to disable secure boot and allow booting from an external device . If your distribution needs a connection to the Internet while installing, make sure to prepare an Ethernet cable, wifi adapter or phone for tethering. If none of these options are available but your model has wifi support, you can also follow the steps to install firmware in your live environment. Keep in mind that in that case you will still need to follow the guide on your actual install after exiting the live environment. If you want to triple boot with Windows, read the instructions in the triple boot guide before proceeding. Installing \u00b6 Now follow the installation guide of your specific distribution. This wiki provides a set of guides for different distributions . If the distribution you want to use is present there, it's recommended to follow it instead of the official documentation by distribution vendor, as it considers T2 support. Configuring the Installation \u00b6 After successfully booting into your new installation, you will need to configure a few things: Install/upgrade drivers for the soundcard, internal keyboard, trackpad and touchbar Getting wifi to work Install drivers for the fan (if not working automatically or want to force a certain speed) Configure audio Configure startup manager (optional) Install rEFInd (optional) You might also want to look into getting the internal GPU to work if your Mac has two graphics cards. However, if you don't need it specifically, it's probably best to stick with the dedicated one. If your Mac only has a single graphics unit, you can ignore this.","title":"Installation Roadmap"},{"location":"roadmap/#introduction","text":"This article is meant to guide users through the wiki by giving an overview over the required steps to get to a working installation.","title":"Introduction"},{"location":"roadmap/#deciding-on-the-installation","text":"Using Linux on a T2 Mac comes with compromises as well as advantages compared to macOS. You will need to decide for yourself if it its worth it. Your first consideration should be the risk you are taking. Don't worry, nobody has broken their machine so far by installing Linux and by following the guides closely you should be able to get everything working even without a lot of knowledge as well. Still in case something goes wrong we are not responsible for it, we will try our best to help out however.","title":"Deciding on the Installation"},{"location":"roadmap/#can-i-completely-remove-macos","text":"While its technically possible to remove macOS entirely, its strongly encouraged to dual boot it with Linux because :- It acts as a backup in case something goes wrong. macOS updates often bring along certain firmware updates, which tend to be useful for Linux as well. Still if you wish to remove macOS completely, it is recommended to create a bootable macOS installer so as to have an option of restoring macOS back. You can also use the Internet Recovery to reinstall macOS, but this has been quite unreliable and slow for a considerable amount of users, thus making the bootable installer method a better one.","title":"Can I completely remove macOS?"},{"location":"roadmap/#what-works-on-linux","text":"Take a look at the state article . It gives a list of roughly what works on Linux and what doesn't. If a specific feature is not listed at all, there is a chance it actually works.","title":"What works on Linux?"},{"location":"roadmap/#choosing-a-distribution","text":"While technically it is not a limitation when installing Linux, different distributions do provide different levels of documentation, ease of use and polish. Arch Linux probably has the most documentation, both officially for the whole project in form of the Arch Wiki and in scope of the t2linux wiki with a really detailed and up to date install guide. On top of that there is also a work in progress archinstall script. Keep in mind however that the whole process is done in the command line. Manjaro has a more guided install experience, with a graphical installer and multiple prebuilt ISOs for different desktop environments. Note that Manjaro currently only has 5.7.19 as the latest kernel version. The support period for 5.7.x ended in August 2020. You could install the linux-mbp-arch kernel, which is updated, by following step 8 of the arch install guide , and sudo pacman -S linux-mbp linux-mbp-headers . Ubuntu also has a graphical installer. Additionally, less post configuration work is required as some kernel modules are getting installed automatically. Fedora also has a prebuilt ISO and a graphical installer. Most things work out of the box, though audio and WiFi generally need to be set up as in the guides below. Then they should work flawlessly. If you wish to use another distribution, you can install it normally, also follow the steps to install the kernel yourself manually and follow the post installation steps .","title":"Choosing a Distribution"},{"location":"roadmap/#preparing-the-installation","text":"You will want to look at the wifi guide to check if your model is supported before starting an installation. Based on that information, prepare anything that is needed for installing on Linux. Make sure to keep the wifi firmware, as well as any other files you might want to access after the installation (a password manager database for example) on a medium you can access from Linux. Linux cannot read APFS, the file system macOS uses by default. You will also need to make some space on your hard drive. While its technically possible to install Linux on an external drive, it depends on the install process of the distribution if this is supported. 20 to 40GB should be fine for a base installation. To boot into a live environment, you need to disable secure boot and allow booting from an external device . If your distribution needs a connection to the Internet while installing, make sure to prepare an Ethernet cable, wifi adapter or phone for tethering. If none of these options are available but your model has wifi support, you can also follow the steps to install firmware in your live environment. Keep in mind that in that case you will still need to follow the guide on your actual install after exiting the live environment. If you want to triple boot with Windows, read the instructions in the triple boot guide before proceeding.","title":"Preparing the Installation"},{"location":"roadmap/#installing","text":"Now follow the installation guide of your specific distribution. This wiki provides a set of guides for different distributions . If the distribution you want to use is present there, it's recommended to follow it instead of the official documentation by distribution vendor, as it considers T2 support.","title":"Installing"},{"location":"roadmap/#configuring-the-installation","text":"After successfully booting into your new installation, you will need to configure a few things: Install/upgrade drivers for the soundcard, internal keyboard, trackpad and touchbar Getting wifi to work Install drivers for the fan (if not working automatically or want to force a certain speed) Configure audio Configure startup manager (optional) Install rEFInd (optional) You might also want to look into getting the internal GPU to work if your Mac has two graphics cards. However, if you don't need it specifically, it's probably best to stick with the dedicated one. If your Mac only has a single graphics unit, you can ignore this.","title":"Configuring the Installation"},{"location":"state/","text":"Introduction \u00b6 While Linux is usable on all T2 models, some features are limited due to the lack of drivers or similar. This page should give a general overview of what is working and what is not. Working \u00b6 Internal Drive / SSD: Support for the SSD has been upstreamed to the Linux Kernel Screen USB Keyboard Camera Wi-Fi Touch Bar: There is support for the \"Touch Bar Keyboard\" device configuration, where only the Function Keys or the Media/Brightness Control Keys can be shown. No other graphics can be shown on the Touchbar (this is what Windows with Bootcamp drivers uses). Partially Working \u00b6 Bluetooth: Not working on models with the BRCM4377 WiFi chip (MacBookPro15,4, MacBookPro16,3, MacBookAir9,1). Keyboard Backlight: Not working on MacBookAir9,1. Trackpad: Functions, but it is far from the experience on macOS (No force touch or palm rejection). Some models have deadzones on the edges of their trackpads where swipes along the trackpad that start in these deadzones will not be registered. Audio: With proper configuration audio can work, however it is not stable in some older kernels and switching between speakers and when using the microphone. Microphone volume is low in some Macs. Suspend (It works if this guide is followed. Sometimes, its slow to resume (takes 5-15 sec). Hybrid Graphics: If the device has a dedicated AMD GPU (15 and 16 inch MacBookPro's) as well as an Intel iGPU, the iGPU can be used, but this breaks resume, see the Hybrid Graphics page. AMD GPUs: Changing resolution, using DRI_PRIME and doing various other things can cause crashes, but echo high | sudo tee /sys/bus/pci/drivers/amdgpu/0000:??:??.?/power_dpm_force_performance_level or adding amdgpu.dpm=0 to the kernel commandline stops these crashes. MacPro7,1: Users have encountered PCIE Address Space issues, with auto remap breaking. Not working \u00b6 Custom graphics on Touchbar: There is currently no Linux driver for the Touchbar's \"Touch Bar Display\" device configuration, which is what macOS uses, and gives full control over the display to the Operating System. T2 Secure Enclave Processor (Touch ID, storing encryption keys on the T2) The T2's onboard Audio Video Encoder (used for Sidecar on macOS) Automatically changing between speakers and headphones when headphones are plugged and unplugged Graphics switching without rebooting (gmux) Other \u00b6 Linux using APFS filesystems: Linux cannot read the internal SSD's macOS APFS parition's Data and System volume (for other APFS volumes, linux-apfs-rw can be used for reading data, but attempting to write is risky. macOS using Linux filesystems: There are FUSE implementations of some Linux Filesystems that can be used on macOS (but again, most only have experemental write support).","title":"Device Support and State of Features"},{"location":"state/#introduction","text":"While Linux is usable on all T2 models, some features are limited due to the lack of drivers or similar. This page should give a general overview of what is working and what is not.","title":"Introduction"},{"location":"state/#working","text":"Internal Drive / SSD: Support for the SSD has been upstreamed to the Linux Kernel Screen USB Keyboard Camera Wi-Fi Touch Bar: There is support for the \"Touch Bar Keyboard\" device configuration, where only the Function Keys or the Media/Brightness Control Keys can be shown. No other graphics can be shown on the Touchbar (this is what Windows with Bootcamp drivers uses).","title":"Working"},{"location":"state/#partially-working","text":"Bluetooth: Not working on models with the BRCM4377 WiFi chip (MacBookPro15,4, MacBookPro16,3, MacBookAir9,1). Keyboard Backlight: Not working on MacBookAir9,1. Trackpad: Functions, but it is far from the experience on macOS (No force touch or palm rejection). Some models have deadzones on the edges of their trackpads where swipes along the trackpad that start in these deadzones will not be registered. Audio: With proper configuration audio can work, however it is not stable in some older kernels and switching between speakers and when using the microphone. Microphone volume is low in some Macs. Suspend (It works if this guide is followed. Sometimes, its slow to resume (takes 5-15 sec). Hybrid Graphics: If the device has a dedicated AMD GPU (15 and 16 inch MacBookPro's) as well as an Intel iGPU, the iGPU can be used, but this breaks resume, see the Hybrid Graphics page. AMD GPUs: Changing resolution, using DRI_PRIME and doing various other things can cause crashes, but echo high | sudo tee /sys/bus/pci/drivers/amdgpu/0000:??:??.?/power_dpm_force_performance_level or adding amdgpu.dpm=0 to the kernel commandline stops these crashes. MacPro7,1: Users have encountered PCIE Address Space issues, with auto remap breaking.","title":"Partially Working"},{"location":"state/#not-working","text":"Custom graphics on Touchbar: There is currently no Linux driver for the Touchbar's \"Touch Bar Display\" device configuration, which is what macOS uses, and gives full control over the display to the Operating System. T2 Secure Enclave Processor (Touch ID, storing encryption keys on the T2) The T2's onboard Audio Video Encoder (used for Sidecar on macOS) Automatically changing between speakers and headphones when headphones are plugged and unplugged Graphics switching without rebooting (gmux)","title":"Not working"},{"location":"state/#other","text":"Linux using APFS filesystems: Linux cannot read the internal SSD's macOS APFS parition's Data and System volume (for other APFS volumes, linux-apfs-rw can be used for reading data, but attempting to write is risky. macOS using Linux filesystems: There are FUSE implementations of some Linux Filesystems that can be used on macOS (but again, most only have experemental write support).","title":"Other"},{"location":"distributions/overview/","text":"Introduction \u00b6 This is a landing page for the distribution specific guides contained in this wiki. Arch Linux EndeavourOS Fedora Gentoo Manjaro Ubuntu","title":"Overview"},{"location":"distributions/overview/#introduction","text":"This is a landing page for the distribution specific guides contained in this wiki. Arch Linux EndeavourOS Fedora Gentoo Manjaro Ubuntu","title":"Introduction"},{"location":"distributions/arch/faq/","text":"Updating Kernel \u00b6 linux-mbp can be updated with sudo pacman -Syu , however it currently hasn't been updated for a while, so you may want to install a newer kernel that will work with OTP firmware selection. Download the .pkg.tar.zst files from here (you can skip the \"docs\" one), and run sudo pacman -U path/to/pkg.tar.zsg path/to/other/pkg.tar.zst . This kernel already includes apple-ibridge and apple-bce so the dkms versions of those modules are optional. You can also use releases from https://github.com/jamlam/mbp-16.1-linux-wifi or https://github.com/aunali1/linux-mbp-arch (Doesn't yet support OTP firmware selection). These won't have apple-bce and apple-ibridge included, so make sure dkms installs those modules for the new kernels if you need them (refer to the dkms guide for this). Building Kernel \u00b6 git clone https://github.com/Redecorating/mbp-16.1-linux-wifi cd mbp-16.1-linux-wifi makepkg -si You can instead clone the other repos mentioned under Updating Kernel . You may need to change the folder you cd into.","title":"FAQ"},{"location":"distributions/arch/faq/#updating-kernel","text":"linux-mbp can be updated with sudo pacman -Syu , however it currently hasn't been updated for a while, so you may want to install a newer kernel that will work with OTP firmware selection. Download the .pkg.tar.zst files from here (you can skip the \"docs\" one), and run sudo pacman -U path/to/pkg.tar.zsg path/to/other/pkg.tar.zst . This kernel already includes apple-ibridge and apple-bce so the dkms versions of those modules are optional. You can also use releases from https://github.com/jamlam/mbp-16.1-linux-wifi or https://github.com/aunali1/linux-mbp-arch (Doesn't yet support OTP firmware selection). These won't have apple-bce and apple-ibridge included, so make sure dkms installs those modules for the new kernels if you need them (refer to the dkms guide for this).","title":"Updating Kernel"},{"location":"distributions/arch/faq/#building-kernel","text":"git clone https://github.com/Redecorating/mbp-16.1-linux-wifi cd mbp-16.1-linux-wifi makepkg -si You can instead clone the other repos mentioned under Updating Kernel . You may need to change the folder you cd into.","title":"Building Kernel"},{"location":"distributions/arch/installation/","text":"Installing Arch Linux on a Mac with the T2 Chip \u00b6 You will need: USB drive with at least 1GB A way to plug it into your Mac (USB-C isn't USB-A) Making a partition for Linux. Open the Bootcamp installer and follow it until it asks for a Windows ISO, this will clear space for a Linux partition (by removing APFS snapshots). In macOS Disk Utility, make a partition, format doesn't matter, but pick the amount of space that you want for Linux. You won't be able to resize your APFS partitions from the installer, so you must make space now. Creating bootable media Download an installer ISO from here . Put this image onto a USB stick, follow these instructions on the Arch Wiki . Disabling secure boot Follow this article's instructions. Once in startup security utility, turn secure boot to no security and enable external boot. Booting the live environment. Plug the USB in to your computer. Boot while holding the option key, this will put you in macOS Startup Manager. Select the orange EFI option with arrow keys and press return/enter on it. Follow the Arch Wiki guide from here up to \"Format the partitions\". You will need to reformat your partitions, except for the EFI partition. The other partitions will need to reformatted as described in the Arch Wiki Installation guide. For the EFI system partition (mentioned in a note on the Arch Wiki), there will be one at /dev/nvme0n1p1 and you can use this if you don't intend to install Windows or already have it installed. If you do intend to triple boot, refer to this guide . Mount the EFI partition that you intend to use for your bootloader on /mnt/boot/efi , and your other partitions on /mnt , etc. Continue following the Arch Wiki's guide until \"Install essential packages\". Install the required packages into your new system with: pacstrap /mnt base linux-t2 apple-bcm-wifi-firmware linux-firmware iwd grub efibootmgr (omit the grub efibootmgr packages from this if you intend to use systemd-boot as your bootloader). Continue following the Arch Wiki's guide until you get to installing a bootloader. Now in your chroot , follow the Audio Config Guide . Add apple-bce to the MODULES list in /etc/mkinitcpio.conf , and then run mkinitcpio -P Add Redecorating's repository to /etc/pacman.conf , by adding this: [Redecorating-t2] Server = https://github.com/Redecorating/archlinux-t2-packages/releases/download/packages Install a bootloader, GRUB is easier, but you can also use systemd-boot. Don't do both. Installing Grub: Edit /etc/default/grub , you'll need to install a text editor (i.e. vim or nano ) with pacman -S PACKAGE_NAME for this step. On the line with GRUB_CMDLINE_LINUX=\"quiet splash\" , add the following kernel parameters: intel_iommu=on iommu=pt pcie_ports=compat Run grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --removable . grub-mkconfig -o /boot/grub/grub.cfg Installing systemd-boot: Follow the Arch wiki's instructions . You will want --path=/boot/efi as an argument to bootctl if you mounted your EFI partition there. Also make sure you configure it to boot the linux-t2 kernel. Install a text editor (i.e. pacman -S vim or pacman -S nano ), and make the following edit for .conf files in /boot/efi/loader/entries/ . Add intel_iommu=on iommu=pt pcie_ports=compat to the options line to add those kernel parameters. Exit the chroot and reboot. You now will be able to select your Arch install in the macOS Startup Manager by holding option at boot.","title":"Installation"},{"location":"distributions/arch/installation/#installing-arch-linux-on-a-mac-with-the-t2-chip","text":"You will need: USB drive with at least 1GB A way to plug it into your Mac (USB-C isn't USB-A) Making a partition for Linux. Open the Bootcamp installer and follow it until it asks for a Windows ISO, this will clear space for a Linux partition (by removing APFS snapshots). In macOS Disk Utility, make a partition, format doesn't matter, but pick the amount of space that you want for Linux. You won't be able to resize your APFS partitions from the installer, so you must make space now. Creating bootable media Download an installer ISO from here . Put this image onto a USB stick, follow these instructions on the Arch Wiki . Disabling secure boot Follow this article's instructions. Once in startup security utility, turn secure boot to no security and enable external boot. Booting the live environment. Plug the USB in to your computer. Boot while holding the option key, this will put you in macOS Startup Manager. Select the orange EFI option with arrow keys and press return/enter on it. Follow the Arch Wiki guide from here up to \"Format the partitions\". You will need to reformat your partitions, except for the EFI partition. The other partitions will need to reformatted as described in the Arch Wiki Installation guide. For the EFI system partition (mentioned in a note on the Arch Wiki), there will be one at /dev/nvme0n1p1 and you can use this if you don't intend to install Windows or already have it installed. If you do intend to triple boot, refer to this guide . Mount the EFI partition that you intend to use for your bootloader on /mnt/boot/efi , and your other partitions on /mnt , etc. Continue following the Arch Wiki's guide until \"Install essential packages\". Install the required packages into your new system with: pacstrap /mnt base linux-t2 apple-bcm-wifi-firmware linux-firmware iwd grub efibootmgr (omit the grub efibootmgr packages from this if you intend to use systemd-boot as your bootloader). Continue following the Arch Wiki's guide until you get to installing a bootloader. Now in your chroot , follow the Audio Config Guide . Add apple-bce to the MODULES list in /etc/mkinitcpio.conf , and then run mkinitcpio -P Add Redecorating's repository to /etc/pacman.conf , by adding this: [Redecorating-t2] Server = https://github.com/Redecorating/archlinux-t2-packages/releases/download/packages Install a bootloader, GRUB is easier, but you can also use systemd-boot. Don't do both. Installing Grub: Edit /etc/default/grub , you'll need to install a text editor (i.e. vim or nano ) with pacman -S PACKAGE_NAME for this step. On the line with GRUB_CMDLINE_LINUX=\"quiet splash\" , add the following kernel parameters: intel_iommu=on iommu=pt pcie_ports=compat Run grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --removable . grub-mkconfig -o /boot/grub/grub.cfg Installing systemd-boot: Follow the Arch wiki's instructions . You will want --path=/boot/efi as an argument to bootctl if you mounted your EFI partition there. Also make sure you configure it to boot the linux-t2 kernel. Install a text editor (i.e. pacman -S vim or pacman -S nano ), and make the following edit for .conf files in /boot/efi/loader/entries/ . Add intel_iommu=on iommu=pt pcie_ports=compat to the options line to add those kernel parameters. Exit the chroot and reboot. You now will be able to select your Arch install in the macOS Startup Manager by holding option at boot.","title":"Installing Arch Linux on a Mac with the T2 Chip"},{"location":"distributions/endeavouros/installation/","text":"Installing EndeavourOS on a Mac with the T2 Chip \u00b6 You will need: USB drive with at least 4GB A way to plug it into your Mac (USB-C isn't USB-A) A wired internet connection (i.e. USB-C to Enternet dongle) or wifi. Making a partition for Linux. In macOS Disk Utility, make a partition, format doesn't matter, but pick the amount of space that you want for Linux. You won't be able to resize your APFS partitions from the installer, so you must make space now. Creating bootable media Download an installer ISO from here . Put this image onto a USB stick, follow these instructions on the Arch Wiki . Disabling secure boot Follow this article's instructions. Once in startup security utility, turn secure boot to no security and enable external boot. Booting the live environment. Plug the USB in to your computer. Boot while holding the option key, this will put you in macOS Startup Manager. Select the orange EFI option with arrow keys and press return/enter on it. Starting Calamares installer If you're not connected to the internet, connect to it now. Use included GUI config tool to connect to Wi-Fi. On the \"Welcome\" window, choose... \"Install community editions\" if you want to install community edition. \"Start the Installer\" if you want to install normal edition. If you chose to install normal edition, choose \"Online\" or \"Offline\" depending on your needs. Follow the installer until Partitions. Select \"Manual partitioning.\" Select \"/dev/nvme0n1p1\" partition, set the \"boot\" flag, and set it to mount under \"/boot/efi\" If you want to use separate EFI partition, check out this guide . Use remaining partition space to your convenience. Follow the rest of the installer and reboot. You can follow the Fan guide after rebooting into your install if your fan isn't working or if you want to customize how/when your fan will run. You now will be able to select your EndeavourOS install in the macOS Startup Manager by holding option at boot.","title":"Installation"},{"location":"distributions/endeavouros/installation/#installing-endeavouros-on-a-mac-with-the-t2-chip","text":"You will need: USB drive with at least 4GB A way to plug it into your Mac (USB-C isn't USB-A) A wired internet connection (i.e. USB-C to Enternet dongle) or wifi. Making a partition for Linux. In macOS Disk Utility, make a partition, format doesn't matter, but pick the amount of space that you want for Linux. You won't be able to resize your APFS partitions from the installer, so you must make space now. Creating bootable media Download an installer ISO from here . Put this image onto a USB stick, follow these instructions on the Arch Wiki . Disabling secure boot Follow this article's instructions. Once in startup security utility, turn secure boot to no security and enable external boot. Booting the live environment. Plug the USB in to your computer. Boot while holding the option key, this will put you in macOS Startup Manager. Select the orange EFI option with arrow keys and press return/enter on it. Starting Calamares installer If you're not connected to the internet, connect to it now. Use included GUI config tool to connect to Wi-Fi. On the \"Welcome\" window, choose... \"Install community editions\" if you want to install community edition. \"Start the Installer\" if you want to install normal edition. If you chose to install normal edition, choose \"Online\" or \"Offline\" depending on your needs. Follow the installer until Partitions. Select \"Manual partitioning.\" Select \"/dev/nvme0n1p1\" partition, set the \"boot\" flag, and set it to mount under \"/boot/efi\" If you want to use separate EFI partition, check out this guide . Use remaining partition space to your convenience. Follow the rest of the installer and reboot. You can follow the Fan guide after rebooting into your install if your fan isn't working or if you want to customize how/when your fan will run. You now will be able to select your EndeavourOS install in the macOS Startup Manager by holding option at boot.","title":"Installing EndeavourOS on a Mac with the T2 Chip"},{"location":"distributions/fedora/faq/","text":"Installing alongside Windows \u00b6 If you already have Bootcamp installed, you might notice that the boot option for Bootcamp instead boots you into Fedora. This is because GRUB automatically shares with a Windows installation. Follow this guide on triple booting to get Windows working again. Why isn't sound / WiFi working? \u00b6 Due to issues in the Fedora install process, there is no sound or WiFi working after install. You'll have to set them up manually. Refer to these guides on audio configuration (note to follow the PipeWire instructions as Fedora uses PipeWire now) and WiFi configuration . My boot hangs before getting to the installer \u00b6 This may be due to differences between USB-C to USB-A adapters. Try a different one if it is not working. Updating Kernel \u00b6 Please refer to this section .","title":"FAQ"},{"location":"distributions/fedora/faq/#installing-alongside-windows","text":"If you already have Bootcamp installed, you might notice that the boot option for Bootcamp instead boots you into Fedora. This is because GRUB automatically shares with a Windows installation. Follow this guide on triple booting to get Windows working again.","title":"Installing alongside Windows"},{"location":"distributions/fedora/faq/#why-isnt-sound-wifi-working","text":"Due to issues in the Fedora install process, there is no sound or WiFi working after install. You'll have to set them up manually. Refer to these guides on audio configuration (note to follow the PipeWire instructions as Fedora uses PipeWire now) and WiFi configuration .","title":"Why isn't sound / WiFi working?"},{"location":"distributions/fedora/faq/#my-boot-hangs-before-getting-to-the-installer","text":"This may be due to differences between USB-C to USB-A adapters. Try a different one if it is not working.","title":"My boot hangs before getting to the installer"},{"location":"distributions/fedora/faq/#updating-kernel","text":"Please refer to this section .","title":"Updating Kernel"},{"location":"distributions/fedora/home/","text":"Welcome to the T2 Fedora wiki! Click here to get started.","title":"Home"},{"location":"distributions/fedora/installation/","text":"Download the latest safe release \u00b6 Many thanks to Mike for building. You can download a live iso here Hardware Requirements \u00b6 USB-C to Ethernet adapter This isn't required, and you can use a USB WiFi Adapter instead. USB-C to USB adapter. Important: different USB-C to USB adapters work differently - if you're stuck before getting to the graphical UI during boot this may be the problem. Install Procedure \u00b6 (These instructions are re-used from the Manjaro installation guide) In order to install Fedora, you'll need to partition your SSD. You can use Disk Utility and a recommended amount is over 64 GB. If you have a Bootcamp install, you don't have to uninstall it. Make sure to have two partitions when you're done (Linux partition and macOS partition). Flash the downloaded iso to a USB Flash Drive, or even an SD Card. Use Balena Etcher for a gui option, command line option is dd. Disable Secure Boot. This is required to even boot into the Live USB. Instructions are below (taken from here ) Shut down your Mac. Then turn it on. If you hear a startup sound or just see the Apple logo, hold down Command (\u2318)-R. Once you are in Recovery Mode, click on Utilites -> Startup Security Utility If it asks for your password, type in the administrator's password and press OK. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". You should be done. Close the window and reboot your Mac. After disabling Secure Boot, hold down Option (\u2325) while the Mac is rebooting. Plug in your USB Flash Drive/SD Card. If two Yellow EFI Boot options appear, select the one towards the very right and hit enter. You should now be in the GRUB boot menu. Select \"Try Fedora Live CD\". Once booted into Fedora, you can install it like normal until you get to the partition option. If you don't get to the graphic OS, try another USB stick. They are not all created alike. Find the partition you made before. MAKE SURE TO SELECT THE RIGHT PARTITION OR ELSE YOUR DATA WILL BE LOST. Delete it to make free space. You'll need to make these partitions: (optional) a 1GB ext4 partiton mounted at /boot (optional) 8GB swap partition (this can be larger depending on what you are using Fedora for) rest of the free partition space or around 30GB to an ext4 partition mounted at / (Optional) rest of the free partition space to an ext4 partition mounted at /home Leave efi boot alone unless using a separate efi partition . Continue the rest of the setup. If your Mac somehow turns off with the fans spinning at full speed, go to the FAQs for Ubuntu and Manjaro . If not, you should be fine. Once it's finished, you can reboot without your installation media. Hold down Option (\u2325) while booting, then select EFI Boot and press enter. Welcome to Fedora! :) Once you're booted and in your desktop, set up Wifi and audio (note: Fedora uses PipeWire!) to finalize.","title":"Installation"},{"location":"distributions/fedora/installation/#download-the-latest-safe-release","text":"Many thanks to Mike for building. You can download a live iso here","title":"Download the latest safe release"},{"location":"distributions/fedora/installation/#hardware-requirements","text":"USB-C to Ethernet adapter This isn't required, and you can use a USB WiFi Adapter instead. USB-C to USB adapter. Important: different USB-C to USB adapters work differently - if you're stuck before getting to the graphical UI during boot this may be the problem.","title":"Hardware Requirements"},{"location":"distributions/fedora/installation/#install-procedure","text":"(These instructions are re-used from the Manjaro installation guide) In order to install Fedora, you'll need to partition your SSD. You can use Disk Utility and a recommended amount is over 64 GB. If you have a Bootcamp install, you don't have to uninstall it. Make sure to have two partitions when you're done (Linux partition and macOS partition). Flash the downloaded iso to a USB Flash Drive, or even an SD Card. Use Balena Etcher for a gui option, command line option is dd. Disable Secure Boot. This is required to even boot into the Live USB. Instructions are below (taken from here ) Shut down your Mac. Then turn it on. If you hear a startup sound or just see the Apple logo, hold down Command (\u2318)-R. Once you are in Recovery Mode, click on Utilites -> Startup Security Utility If it asks for your password, type in the administrator's password and press OK. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". You should be done. Close the window and reboot your Mac. After disabling Secure Boot, hold down Option (\u2325) while the Mac is rebooting. Plug in your USB Flash Drive/SD Card. If two Yellow EFI Boot options appear, select the one towards the very right and hit enter. You should now be in the GRUB boot menu. Select \"Try Fedora Live CD\". Once booted into Fedora, you can install it like normal until you get to the partition option. If you don't get to the graphic OS, try another USB stick. They are not all created alike. Find the partition you made before. MAKE SURE TO SELECT THE RIGHT PARTITION OR ELSE YOUR DATA WILL BE LOST. Delete it to make free space. You'll need to make these partitions: (optional) a 1GB ext4 partiton mounted at /boot (optional) 8GB swap partition (this can be larger depending on what you are using Fedora for) rest of the free partition space or around 30GB to an ext4 partition mounted at / (Optional) rest of the free partition space to an ext4 partition mounted at /home Leave efi boot alone unless using a separate efi partition . Continue the rest of the setup. If your Mac somehow turns off with the fans spinning at full speed, go to the FAQs for Ubuntu and Manjaro . If not, you should be fine. Once it's finished, you can reboot without your installation media. Hold down Option (\u2325) while booting, then select EFI Boot and press enter. Welcome to Fedora! :) Once you're booted and in your desktop, set up Wifi and audio (note: Fedora uses PipeWire!) to finalize.","title":"Install Procedure"},{"location":"distributions/gentoo/installation/","text":"Installing Gentoo Linux on a T2 Mac \u00b6 Hardware Requirements \u00b6 Gentoo Minimal Installation ISO Requirements for this ISO: USB keyboard, mouse, ethernet adapter/Wi-Fi adapter If you don't meet the requirements, then you are required to use another distro's ISO. A recommended distro to use is Ubuntu, more specifically, mbp-ubuntu . Make sure to follow this guide along with this guide and the Gentoo Handbook starting at step 5 USB-C to USB-A adapter USB Flash Drive Install Procedure \u00b6 Partition your SSD Open the Bootcamp installer and follow along until it requests for you to input a Windows ISO. This should clear space for a Linux partition because of removed APFS snapshots. Now open up Disk Utility. Make a partition with any format. The amount of space you allocate for this Linux partition will be final, so choose wisely. Download a Gentoo ISO and flash it to your USB Flash Drive via Balena Etcher (you can also use dd) Ensure that Secure Boot is disabled Follow the instructions from this article Once in the Startup Security Utility, set secure boot to no security and enable external boot. Boot into the Live USB enviornment Plug in the USB Flash Drive into your computer Startup while holding the Option key, this will put you in the macOS Startup Manager Select the orange EFI Boot option and press enter to boot into it. (If you're using a Ubuntu Live environment, then make sure to select the orange EFI Boot option all the way to the right) Follow the Gentoo Handbook Instead of making a new EFI partition for Gentoo, you should instead mount /dev/nvme0n1p1 to /mnt/gentoo/boot/efi Make sure that you have deleted the partition you made ahead of time, or else you'll lose important data Continue through the Handbook until chapter \"Configuring the kernel\" In order to have the Linux Kernel support your device the most, you'll have to build from a modified Linux Kernel source tree. Git clone the t2linux kernel source tree to /usr/src Make sure to git checkout the version you want. For example, if you want kernel version v5.16.17, you would checkout tag t2-v5.16.17 . Run these commands to symlink the kernel to /usr/src/linux : eselect kernel list # there should be one option that shows up eselect kernel set 1 ls -l /usr/src/linux # check if the symlink succeded Run these commands to grab apple-bce and apple-ibridge: git clone https://github.com/t2linux/apple-bce-drv /usr/src/apple-bce git clone https://github.com/t2linux/apple-ib-drv /usr/src/apple-ibridge for i in apple-bce apple-ibridge ; do mkdir /usr/src/linux/drivers/staging/ $i cp -r /usr/src/ $i /* /usr/src/linux/drivers/staging/ $i / done Run these commands in order to include apple-bce and apple-ibridge into the kernel source tree: git clone https://github.com/Redecorating/mbp-16.1-linux-wifi /linux-patches cd /usr/src/linux for i in /linux-patches/*.patch ; do echo $i patch -Np1 < $i done Git clone the https://anongit.gentoo.org/git/proj/linux-patches.git repo to a folder called /gentoo-patches . This repo includes Gentoo patches for the kernel source tree usually included with the gentoo-sources Portage package. Apply them with a modified version of the commands used above. Copy the default config from the patches repo to the kernel source tree. If you do this, please make sure to set any filesystem drivers you want to use (like for ext4) to be built-in instead of being a module with make menuconfig Build with make all . If you want to speed up the build process, add -j$(nproc) Before finishing, if you want to connect to the internet later, now is a good time to install NetworkManager and optionally iwd . Continue through the Handbook until chapter \"Configuring the bootloader\" Install grub by using emerge --ask --verbose sys-boot/grub Edit the config file /etc/default/grub with your favorite text editor of choice (i.e. vim or nano) On the line with GRUB_CMDLINE_LINUX , append the following parameters: intel_iommu=on iommu=pt pcie_ports=compat Run grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable to install Grub. Run grub-mkconfig -o /boot/grub/grub.cfg to make the config files for Grub You're done! You should now be able to boot into Gentoo via the macOS Startup Manager If you confirmed that Gentoo does bootup no problem, then you can boot into macOS and follow the Wi-Fi guide","title":"Installation"},{"location":"distributions/gentoo/installation/#installing-gentoo-linux-on-a-t2-mac","text":"","title":"Installing Gentoo Linux on a T2 Mac"},{"location":"distributions/gentoo/installation/#hardware-requirements","text":"Gentoo Minimal Installation ISO Requirements for this ISO: USB keyboard, mouse, ethernet adapter/Wi-Fi adapter If you don't meet the requirements, then you are required to use another distro's ISO. A recommended distro to use is Ubuntu, more specifically, mbp-ubuntu . Make sure to follow this guide along with this guide and the Gentoo Handbook starting at step 5 USB-C to USB-A adapter USB Flash Drive","title":"Hardware Requirements"},{"location":"distributions/gentoo/installation/#install-procedure","text":"Partition your SSD Open the Bootcamp installer and follow along until it requests for you to input a Windows ISO. This should clear space for a Linux partition because of removed APFS snapshots. Now open up Disk Utility. Make a partition with any format. The amount of space you allocate for this Linux partition will be final, so choose wisely. Download a Gentoo ISO and flash it to your USB Flash Drive via Balena Etcher (you can also use dd) Ensure that Secure Boot is disabled Follow the instructions from this article Once in the Startup Security Utility, set secure boot to no security and enable external boot. Boot into the Live USB enviornment Plug in the USB Flash Drive into your computer Startup while holding the Option key, this will put you in the macOS Startup Manager Select the orange EFI Boot option and press enter to boot into it. (If you're using a Ubuntu Live environment, then make sure to select the orange EFI Boot option all the way to the right) Follow the Gentoo Handbook Instead of making a new EFI partition for Gentoo, you should instead mount /dev/nvme0n1p1 to /mnt/gentoo/boot/efi Make sure that you have deleted the partition you made ahead of time, or else you'll lose important data Continue through the Handbook until chapter \"Configuring the kernel\" In order to have the Linux Kernel support your device the most, you'll have to build from a modified Linux Kernel source tree. Git clone the t2linux kernel source tree to /usr/src Make sure to git checkout the version you want. For example, if you want kernel version v5.16.17, you would checkout tag t2-v5.16.17 . Run these commands to symlink the kernel to /usr/src/linux : eselect kernel list # there should be one option that shows up eselect kernel set 1 ls -l /usr/src/linux # check if the symlink succeded Run these commands to grab apple-bce and apple-ibridge: git clone https://github.com/t2linux/apple-bce-drv /usr/src/apple-bce git clone https://github.com/t2linux/apple-ib-drv /usr/src/apple-ibridge for i in apple-bce apple-ibridge ; do mkdir /usr/src/linux/drivers/staging/ $i cp -r /usr/src/ $i /* /usr/src/linux/drivers/staging/ $i / done Run these commands in order to include apple-bce and apple-ibridge into the kernel source tree: git clone https://github.com/Redecorating/mbp-16.1-linux-wifi /linux-patches cd /usr/src/linux for i in /linux-patches/*.patch ; do echo $i patch -Np1 < $i done Git clone the https://anongit.gentoo.org/git/proj/linux-patches.git repo to a folder called /gentoo-patches . This repo includes Gentoo patches for the kernel source tree usually included with the gentoo-sources Portage package. Apply them with a modified version of the commands used above. Copy the default config from the patches repo to the kernel source tree. If you do this, please make sure to set any filesystem drivers you want to use (like for ext4) to be built-in instead of being a module with make menuconfig Build with make all . If you want to speed up the build process, add -j$(nproc) Before finishing, if you want to connect to the internet later, now is a good time to install NetworkManager and optionally iwd . Continue through the Handbook until chapter \"Configuring the bootloader\" Install grub by using emerge --ask --verbose sys-boot/grub Edit the config file /etc/default/grub with your favorite text editor of choice (i.e. vim or nano) On the line with GRUB_CMDLINE_LINUX , append the following parameters: intel_iommu=on iommu=pt pcie_ports=compat Run grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable to install Grub. Run grub-mkconfig -o /boot/grub/grub.cfg to make the config files for Grub You're done! You should now be able to boot into Gentoo via the macOS Startup Manager If you confirmed that Gentoo does bootup no problem, then you can boot into macOS and follow the Wi-Fi guide","title":"Install Procedure"},{"location":"distributions/manjaro/faq/","text":"Migrating from Pykee's old kernel to new LTS kernel \u00b6 Run this in your terminal: cat << EOF | sudo tee -a /etc/pacman.conf [manjaro-mact2] SigLevel = Never Server = https://mirror.funami.tech/manjaro-mact2/os/x86_64 EOF sudo pacman --ignore zfs-utils -Syu linux515-t2 linux515-t2-headers apple-bcm-wifi-firmware After running this, remove old repository and reboot. Migrating from mainline 5.16 kernel to LTS kernel (recommended) \u00b6 Users using 5.16 kernel are advised to migrate to LTS kernel since it now integrates necessary modules into kernel. Even if you want to update to 5.17 it's still advised to first jump to LTS kernel and wait here. Run this in your terminal: # Say yes to removing conflicting packages. apple-ibridge-dkms-git and apple-bce-dkms-git is now integrated to kernel thus those DKMS modules are not necessary. sudo pacman -Syu linux515-t2 linux515-t2-headers sudo pacman -R linux516-t2 linux516-t2-headers Installing alongside Windows \u00b6 If you want both Manjaro and Windows installed on your system, refer to this guide on triple booting as you install. Switch Touchbar to Function Keys \u00b6 Run this in your terminal: sudo bash -c \"echo 2 > /sys/class/input/*/device/fnmode\"","title":"FAQ"},{"location":"distributions/manjaro/faq/#migrating-from-pykees-old-kernel-to-new-lts-kernel","text":"Run this in your terminal: cat << EOF | sudo tee -a /etc/pacman.conf [manjaro-mact2] SigLevel = Never Server = https://mirror.funami.tech/manjaro-mact2/os/x86_64 EOF sudo pacman --ignore zfs-utils -Syu linux515-t2 linux515-t2-headers apple-bcm-wifi-firmware After running this, remove old repository and reboot.","title":"Migrating from Pykee's old kernel to new LTS kernel"},{"location":"distributions/manjaro/faq/#migrating-from-mainline-516-kernel-to-lts-kernel-recommended","text":"Users using 5.16 kernel are advised to migrate to LTS kernel since it now integrates necessary modules into kernel. Even if you want to update to 5.17 it's still advised to first jump to LTS kernel and wait here. Run this in your terminal: # Say yes to removing conflicting packages. apple-ibridge-dkms-git and apple-bce-dkms-git is now integrated to kernel thus those DKMS modules are not necessary. sudo pacman -Syu linux515-t2 linux515-t2-headers sudo pacman -R linux516-t2 linux516-t2-headers","title":"Migrating from mainline 5.16 kernel to LTS kernel (recommended)"},{"location":"distributions/manjaro/faq/#installing-alongside-windows","text":"If you want both Manjaro and Windows installed on your system, refer to this guide on triple booting as you install.","title":"Installing alongside Windows"},{"location":"distributions/manjaro/faq/#switch-touchbar-to-function-keys","text":"Run this in your terminal: sudo bash -c \"echo 2 > /sys/class/input/*/device/fnmode\"","title":"Switch Touchbar to Function Keys"},{"location":"distributions/manjaro/home/","text":"Welcome to the mbp-manjaro wiki! Click here to get started.","title":"Home"},{"location":"distributions/manjaro/installation/","text":"Download a latest release \u00b6 See releases Hardware Requirements \u00b6 USB-C to Ethernet cable adapter. While you can install Manjaro over WiFi, it would be a lot easier to use an Adapter during the installation process. USB-C to USB Adapter USB drive Install Procedure \u00b6 Partition your drive in macOS so you can install Linux. You can either use Disk Utility or use Bootcamp, but the important thing is that you have two partitions (your macOS partition and your new linux one). It isn't recommended that you completely delete macOS as firmware updates are applied through it. Flash your Manjaro ISO to a USB Stick. If you want an easier way to do this. Use Balena Etcher . Terminal users can also use dd. Disable macOS secure boot. Apple's Documentation Turn on your Mac, then press and hold Command (\u2318)-R immediately after you see the Apple logo to start up from macOS Recovery. When you see the macOS Utilities window, choose Utilities > Startup Security Utility from the menu bar. When you're asked to authenticate, click Enter macOS Password, then choose an administrator account and enter its password. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". Reboot your Mac. Once Secure boot is diabled, fully shutdown your Computer and Power it on again whilst holding the Option (\u2325) key. Select the yellow EFI System option using the arrow keys and hit enter. Scroll down to Boot x86 64 {Your Edition} using the arrow keys and press enter. Open the installer and proceed normally until you arrive at the partitioning stage (the Installer will automatically start if you have used the second set of commands given above). Click Manual Partitioning. Click on /dev/nvme0n1p1 , then press edit at the bottom of the install window, change the mount point to /boot/efi , and then click ok. Usually, the macOS partition is /dev/nvme0n1p2 (the Apple APFS Partition). Ignore this partition. Delete the partition you created before - this is usually mounted to /dev/nvme0n1p3 . These next steps involve partitioning the /boot (boot), / (Root) and /home (Home) partitions of your Linux filesystem. If you know what you're doing, feel free to skip to step 15. Create a 2000 MiB partition with ext4 as the file system. Change the mount point to /boot and click ok. Create a 51200 MiB partition with ext4 as the file system. Change the mount point to / and click ok. Use the remaining disk space to create an ext4 file system. Change the mount point to /home . Continue the rest of the setup as normal. Once the setup process is complete, restart your computer. Make sure you remove the install medium once powered off. Once again, power on your computer whilst holding the Option (\u2325) key. Then select EFI Boot. Welcome to Manjaro :)","title":"Installation"},{"location":"distributions/manjaro/installation/#download-a-latest-release","text":"See releases","title":"Download a latest release"},{"location":"distributions/manjaro/installation/#hardware-requirements","text":"USB-C to Ethernet cable adapter. While you can install Manjaro over WiFi, it would be a lot easier to use an Adapter during the installation process. USB-C to USB Adapter USB drive","title":"Hardware Requirements"},{"location":"distributions/manjaro/installation/#install-procedure","text":"Partition your drive in macOS so you can install Linux. You can either use Disk Utility or use Bootcamp, but the important thing is that you have two partitions (your macOS partition and your new linux one). It isn't recommended that you completely delete macOS as firmware updates are applied through it. Flash your Manjaro ISO to a USB Stick. If you want an easier way to do this. Use Balena Etcher . Terminal users can also use dd. Disable macOS secure boot. Apple's Documentation Turn on your Mac, then press and hold Command (\u2318)-R immediately after you see the Apple logo to start up from macOS Recovery. When you see the macOS Utilities window, choose Utilities > Startup Security Utility from the menu bar. When you're asked to authenticate, click Enter macOS Password, then choose an administrator account and enter its password. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". Reboot your Mac. Once Secure boot is diabled, fully shutdown your Computer and Power it on again whilst holding the Option (\u2325) key. Select the yellow EFI System option using the arrow keys and hit enter. Scroll down to Boot x86 64 {Your Edition} using the arrow keys and press enter. Open the installer and proceed normally until you arrive at the partitioning stage (the Installer will automatically start if you have used the second set of commands given above). Click Manual Partitioning. Click on /dev/nvme0n1p1 , then press edit at the bottom of the install window, change the mount point to /boot/efi , and then click ok. Usually, the macOS partition is /dev/nvme0n1p2 (the Apple APFS Partition). Ignore this partition. Delete the partition you created before - this is usually mounted to /dev/nvme0n1p3 . These next steps involve partitioning the /boot (boot), / (Root) and /home (Home) partitions of your Linux filesystem. If you know what you're doing, feel free to skip to step 15. Create a 2000 MiB partition with ext4 as the file system. Change the mount point to /boot and click ok. Create a 51200 MiB partition with ext4 as the file system. Change the mount point to / and click ok. Use the remaining disk space to create an ext4 file system. Change the mount point to /home . Continue the rest of the setup as normal. Once the setup process is complete, restart your computer. Make sure you remove the install medium once powered off. Once again, power on your computer whilst holding the Option (\u2325) key. Then select EFI Boot. Welcome to Manjaro :)","title":"Install Procedure"},{"location":"distributions/ubuntu/faq/","text":"Why does my MacBook turn off in the middle of the Ubuntu installation? \u00b6 This seems to happen with certain MacBooks because the GRUB bootloader installer tries accessing the efivars/nvram, which Apple doesn't allow and the installer doesn't know what to do. There is a way to stop this. Boot into the installation media with an External USB Keyboard plugged in. Press e when you selected the \"Try Ubuntu without installing\" option. Scroll to the bottom with the arrow keys, and type in efi=noruntime . With the External keyboard, then press CTRL+X or F10 to boot into the Live Media. The installation should work fine now. This issue has occured for anyone on the 16,1 and maybe the 16,4. Making the GRUB Menu appear \u00b6 The GRUB bootloader by default turns off the GRUB Menu. This means you can't boot into Bootcamp Windows if it's installed. This can be easily fixed after Ubuntu is fully installed. In a Terminal in Ubuntu, edit file /etc/default/grub with any preferred editior (nano/vim) and with root permissions. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . Save the file once you're done. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished. Installing alongside Windows \u00b6 If you already have Bootcamp installed, you might notice that the boot option for Bootcamp instead boots you into Ubuntu. This is because GRUB automatically shares with a Windows installation. Follow this guide on triple booting to get Windows working again. Why isn't sound working? \u00b6 Due to issues in the mbp-ubuntu install process, there is no sound working after install. You'll have to set it up manually. Refer to this guide on audio configuration . Updating Kernel \u00b6 Ubuntu and Debian based distro users can upgrade their kernel with these instructions.","title":"FAQ"},{"location":"distributions/ubuntu/faq/#why-does-my-macbook-turn-off-in-the-middle-of-the-ubuntu-installation","text":"This seems to happen with certain MacBooks because the GRUB bootloader installer tries accessing the efivars/nvram, which Apple doesn't allow and the installer doesn't know what to do. There is a way to stop this. Boot into the installation media with an External USB Keyboard plugged in. Press e when you selected the \"Try Ubuntu without installing\" option. Scroll to the bottom with the arrow keys, and type in efi=noruntime . With the External keyboard, then press CTRL+X or F10 to boot into the Live Media. The installation should work fine now. This issue has occured for anyone on the 16,1 and maybe the 16,4.","title":"Why does my MacBook turn off in the middle of the Ubuntu installation?"},{"location":"distributions/ubuntu/faq/#making-the-grub-menu-appear","text":"The GRUB bootloader by default turns off the GRUB Menu. This means you can't boot into Bootcamp Windows if it's installed. This can be easily fixed after Ubuntu is fully installed. In a Terminal in Ubuntu, edit file /etc/default/grub with any preferred editior (nano/vim) and with root permissions. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . Save the file once you're done. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished.","title":"Making the GRUB Menu appear"},{"location":"distributions/ubuntu/faq/#installing-alongside-windows","text":"If you already have Bootcamp installed, you might notice that the boot option for Bootcamp instead boots you into Ubuntu. This is because GRUB automatically shares with a Windows installation. Follow this guide on triple booting to get Windows working again.","title":"Installing alongside Windows"},{"location":"distributions/ubuntu/faq/#why-isnt-sound-working","text":"Due to issues in the mbp-ubuntu install process, there is no sound working after install. You'll have to set it up manually. Refer to this guide on audio configuration .","title":"Why isn't sound working?"},{"location":"distributions/ubuntu/faq/#updating-kernel","text":"Ubuntu and Debian based distro users can upgrade their kernel with these instructions.","title":"Updating Kernel"},{"location":"distributions/ubuntu/home/","text":"Welcome to the T2 Ubuntu wiki! Click here to get started.","title":"Home"},{"location":"distributions/ubuntu/installation/","text":"Download the latest safe release \u00b6 Mac Mini Ubuntu's GRUB is not booting using the Mac Startup Manager for many users. Thus affected users are advised to install the rEFInd bootloader and boot the kernel using it instead of the Startup Manager. Download here (20.04) Download here (22.04) Hardware Requirements \u00b6 USB-C to Ethernet adapter This isn't required, and you can use a USB WiFi Adapter instead. USB-C to USB adapter Install Procedure \u00b6 (These instructions are reused from the Manjaro installation guide) In order to install Ubuntu, you'll need to partition your SSD. You can use Disk Utility and a recommended amount is over 64 GB. If you have a Bootcamp install, you don't have to uninstall it. Make sure to have two partitions when your done (Linux partition and macOS partition). Flash the downloaded iso to a USB Flash Drive, or even an SD Card. Use Balena Etcher for a gui option, command line option is dd. Disable Secure Boot. This is required to even boot into the Live USB. Instructions are below (taken from here ) Shut down your Mac. Then turn it on. If you hear a startup sound or just see the Apple logo, hold down Command (\u2318)-R. Once you are in Recovery Mode, click on Utilites -> Startup Security Utility If it asks for your password, type in the administrator's password and press OK. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". You should be done. Close the window and reboot your Mac. After disabling Secure Boot, hold down Option (\u2325) while the Mac is rebooting. Plug in your USB Flash Drive/SD Card. If two Yellow EFI Boot options appear, select the one towards the very right and hit enter. You should now be in the GRUB boot menu. Select \"Try Ubuntu without installing\". Just a warning, if you select \"Install Ubuntu\", there might be a loud startup sound. Once booted into Ubuntu, you can install it like normal until you get to the partition option. Find the partition you made before. MAKE SURE TO SELECT THE RIGHT PARTITION OR ELSE YOUR DATA WILL BE LOST. Delete it to make free space. You'll need to make these partitions: (optional) a 1GB ext4 partiton mounted at /boot (optional) 8GB swap partition (this can be larger depending on what you are using Ubuntu for) rest of the free partition space or around 30GB to an ext4 partition mounted at / (Optional) rest of the free partition space to an ext4 partition mounted at /home Leave efi boot alone until using a separate efi partition . Continue the rest of the setup. If your Mac somehow turns off with the fans spinning at full speed, go to FAQ. If not, you should be fine. Once it's finished, you can reboot without your installation media. Hold down Option (\u2325) while booting, then select EFI Boot and press enter. Welcome to Ubuntu! :)","title":"Installation"},{"location":"distributions/ubuntu/installation/#download-the-latest-safe-release","text":"Mac Mini Ubuntu's GRUB is not booting using the Mac Startup Manager for many users. Thus affected users are advised to install the rEFInd bootloader and boot the kernel using it instead of the Startup Manager. Download here (20.04) Download here (22.04)","title":"Download the latest safe release"},{"location":"distributions/ubuntu/installation/#hardware-requirements","text":"USB-C to Ethernet adapter This isn't required, and you can use a USB WiFi Adapter instead. USB-C to USB adapter","title":"Hardware Requirements"},{"location":"distributions/ubuntu/installation/#install-procedure","text":"(These instructions are reused from the Manjaro installation guide) In order to install Ubuntu, you'll need to partition your SSD. You can use Disk Utility and a recommended amount is over 64 GB. If you have a Bootcamp install, you don't have to uninstall it. Make sure to have two partitions when your done (Linux partition and macOS partition). Flash the downloaded iso to a USB Flash Drive, or even an SD Card. Use Balena Etcher for a gui option, command line option is dd. Disable Secure Boot. This is required to even boot into the Live USB. Instructions are below (taken from here ) Shut down your Mac. Then turn it on. If you hear a startup sound or just see the Apple logo, hold down Command (\u2318)-R. Once you are in Recovery Mode, click on Utilites -> Startup Security Utility If it asks for your password, type in the administrator's password and press OK. Set the first option to \"No Security\", and the second to \"Allow booting from External Media\". You should be done. Close the window and reboot your Mac. After disabling Secure Boot, hold down Option (\u2325) while the Mac is rebooting. Plug in your USB Flash Drive/SD Card. If two Yellow EFI Boot options appear, select the one towards the very right and hit enter. You should now be in the GRUB boot menu. Select \"Try Ubuntu without installing\". Just a warning, if you select \"Install Ubuntu\", there might be a loud startup sound. Once booted into Ubuntu, you can install it like normal until you get to the partition option. Find the partition you made before. MAKE SURE TO SELECT THE RIGHT PARTITION OR ELSE YOUR DATA WILL BE LOST. Delete it to make free space. You'll need to make these partitions: (optional) a 1GB ext4 partiton mounted at /boot (optional) 8GB swap partition (this can be larger depending on what you are using Ubuntu for) rest of the free partition space or around 30GB to an ext4 partition mounted at / (Optional) rest of the free partition space to an ext4 partition mounted at /home Leave efi boot alone until using a separate efi partition . Continue the rest of the setup. If your Mac somehow turns off with the fans spinning at full speed, go to FAQ. If not, you should be fine. Once it's finished, you can reboot without your installation media. Hold down Option (\u2325) while booting, then select EFI Boot and press enter. Welcome to Ubuntu! :)","title":"Install Procedure"},{"location":"distributions/ubuntu/upgrade/","text":"Upgrade \u00b6 Recommendations: Perform upgrade from LTS to LTS. Warnings: If you have important data and workspace, make sure that you have backup. Make sure you have enough disk space. Ensure that you met all the below requirements so that you can recover in case of failed upgrade. Hardware Requirements \u00b6 For troubleshooting you need internet access. It is possible that Wi-Fi may also not work for some users during troubleshooting. In that case, you shall also require: USB-C to Ethernet adapter OR Smartphone capable of USB tethering to provide internet in case of emergency A cable that can connect one of the above objects to your Mac Kernel Requirements \u00b6 Before upgrade, check the latest official Ubuntu release and find its kernel version. You need to install the same or higher custom kernel version for your current Ubuntu to make sure that it will work properly without problems related to the kernel version. Upgrade Procedure \u00b6 Most probably you are using a LTS version of the Ubuntu right now. If a newer LTS Ubuntu is released in April, you will not be notified until Canonical release the first point release (e.g. 22.04.1) which normally out around August. However, you can still upgrade to the final version before August. Open a terminal and: If it's after first point release, do sudo do-release-upgrade or use \"Software Updater\" tool. If it's before and the upgrade tool says there is no newer version, try sudo do-release-upgrade -d . Follow the instructions given by the tool and answer if it asks question about some of the packages that you want to be upgraded, etc. Let the tool finish the download and begin the process. Keep an eye on the screen to see how it is going. In the middle it might ask you to choose some options. If the installation finishes successfully, do a reboot and boot your Mac. Otherwise, see the Troubleshooting section. Troubleshooting \u00b6 In case the upgrade process gives error about broken packets, do not reboot. Try to resolve the problem first, and resume the process. If your Mac is crashed and you must press and hold power button, then probably you will boot to a black screen with minimal console because gnome-shell (default desktop) package is not installed yet. Here you need to deal with all the errors. The goal is to install at least a GUI at first place so that you can get rid of the black screen with tiny text, then try to resolve other problems using GUI. Login with your user and password. Connect your Mac to the internet: A. Using Wi-Fi: * Check if Wi-Fi module is loaded with lsmod | grep brcmfmac , if not load it with sudo modprobe brcmfmac . * Use Wi-Fi cli tools to connect to your Wi-Fi network. Further instruction could be found here . B. Using USB-C to Ethernet adapter or use your smart phone's USB tethering: * ifconfig -a , it will show all the available network interfaces. remember the one appears when you connect the USB. * bring up the USB interface sudo ifconfig <USB_INTERFACE> up * Ask for an IP using dhclient * Ping ping google.com to make sure you have access to internet Try sudo apt install --fix-broken . If it succeeds, resume upgrade and reboot . If not, go to 4. Try sudo apt install gnome-shell if it succeeds, do reboot . If not: Try to read the errors and find out the solution. For example if there is conflict between package version, try to remove the installed one by sudo apt autoremove <PACKAGE_NAME> and the try install gnome desktop again. If you really stuck with installing gnome desktop, try other desktops like: sudo apt install ubuntu-mate-desktop Boot to newly installed desktop and do sudo apt upgrade and hope it would end up with success, otherwise try to understand the error and resolve them. Always google your errors.","title":"Upgrade"},{"location":"distributions/ubuntu/upgrade/#upgrade","text":"Recommendations: Perform upgrade from LTS to LTS. Warnings: If you have important data and workspace, make sure that you have backup. Make sure you have enough disk space. Ensure that you met all the below requirements so that you can recover in case of failed upgrade.","title":"Upgrade"},{"location":"distributions/ubuntu/upgrade/#hardware-requirements","text":"For troubleshooting you need internet access. It is possible that Wi-Fi may also not work for some users during troubleshooting. In that case, you shall also require: USB-C to Ethernet adapter OR Smartphone capable of USB tethering to provide internet in case of emergency A cable that can connect one of the above objects to your Mac","title":"Hardware Requirements"},{"location":"distributions/ubuntu/upgrade/#kernel-requirements","text":"Before upgrade, check the latest official Ubuntu release and find its kernel version. You need to install the same or higher custom kernel version for your current Ubuntu to make sure that it will work properly without problems related to the kernel version.","title":"Kernel Requirements"},{"location":"distributions/ubuntu/upgrade/#upgrade-procedure","text":"Most probably you are using a LTS version of the Ubuntu right now. If a newer LTS Ubuntu is released in April, you will not be notified until Canonical release the first point release (e.g. 22.04.1) which normally out around August. However, you can still upgrade to the final version before August. Open a terminal and: If it's after first point release, do sudo do-release-upgrade or use \"Software Updater\" tool. If it's before and the upgrade tool says there is no newer version, try sudo do-release-upgrade -d . Follow the instructions given by the tool and answer if it asks question about some of the packages that you want to be upgraded, etc. Let the tool finish the download and begin the process. Keep an eye on the screen to see how it is going. In the middle it might ask you to choose some options. If the installation finishes successfully, do a reboot and boot your Mac. Otherwise, see the Troubleshooting section.","title":"Upgrade Procedure"},{"location":"distributions/ubuntu/upgrade/#troubleshooting","text":"In case the upgrade process gives error about broken packets, do not reboot. Try to resolve the problem first, and resume the process. If your Mac is crashed and you must press and hold power button, then probably you will boot to a black screen with minimal console because gnome-shell (default desktop) package is not installed yet. Here you need to deal with all the errors. The goal is to install at least a GUI at first place so that you can get rid of the black screen with tiny text, then try to resolve other problems using GUI. Login with your user and password. Connect your Mac to the internet: A. Using Wi-Fi: * Check if Wi-Fi module is loaded with lsmod | grep brcmfmac , if not load it with sudo modprobe brcmfmac . * Use Wi-Fi cli tools to connect to your Wi-Fi network. Further instruction could be found here . B. Using USB-C to Ethernet adapter or use your smart phone's USB tethering: * ifconfig -a , it will show all the available network interfaces. remember the one appears when you connect the USB. * bring up the USB interface sudo ifconfig <USB_INTERFACE> up * Ask for an IP using dhclient * Ping ping google.com to make sure you have access to internet Try sudo apt install --fix-broken . If it succeeds, resume upgrade and reboot . If not, go to 4. Try sudo apt install gnome-shell if it succeeds, do reboot . If not: Try to read the errors and find out the solution. For example if there is conflict between package version, try to remove the installed one by sudo apt autoremove <PACKAGE_NAME> and the try install gnome desktop again. If you really stuck with installing gnome desktop, try other desktops like: sudo apt install ubuntu-mate-desktop Boot to newly installed desktop and do sudo apt upgrade and hope it would end up with success, otherwise try to understand the error and resolve them. Always google your errors.","title":"Troubleshooting"},{"location":"guides/audio-config/","text":"Introduction \u00b6 This page explains how to get the config files for using the T2 audio device, which allows use of the 3.5mm headphone port, the built in speakers, the built in mic and the headphones' mic. Before you proceed, make sure you already have apple_bce loaded by running lsmod | grep apple_bce . If not, follow the instructions on how to setup the BCE module . Enable Pass-Through Kernel Parameters \u00b6 Cat cat /proc/cmdline and ensure that your kernel parameters contain intel_iommu=on iommu=pt pcie_ports=compat . If not present, you'll have to update your bootup kernel params: edit /etc/default/grub and update GRUB_CMDLINE_LINUX to include intel_iommu=on iommu=pt pcie_ports=compat Apply your edits by running sudo update-grub on ubuntu or sudo grub-mkconfig -o /boot/grub/grub.cfg for other distros Reboot and ensure cat /proc/cmdline contains those params systemd-boot If you use systemd-boot you'll instead edit your boot conf files to add intel_iommu=on iommu=pt pcie_ports=compat to the options line. The files to edit will have the .conf extension and be in the loader/entries/ folder on your EFI partition. This will most likely be /boot/efi/loader/entries Audio Configuration Files \u00b6 In most scenarios, you should use these files , following the instructions in that gist's README.md . Special scenarios are: 2019 16\" MacBook Pro audio files - that laptop has 6 speakers and needs slightly different config 2020 13\" MacBook Air audio files Using Pipewire instead of Pulseaudio \u00b6 You'll need to modify the /lib/udev/rules.d/91-pulseaudio-custom.rules file from the links above. SUBSYSTEM!=\"sound\", GOTO=\"pulseaudio_end\" ACTION!=\"change\", GOTO=\"pulseaudio_end\" KERNEL!=\"card*\", GOTO=\"pulseaudio_end\" -SUBSYSTEMS==\"pci\", ATTRS{vendor}==\"0x106b\", ATTRS{device}==\"0x1803\", ENV{PULSE_PROFILE_SET}=\"apple-t2.conf\" +SUBSYSTEMS==\"pci\", ATTRS{vendor}==\"0x106b\", ATTRS{device}==\"0x1803\", ENV{PULSE_PROFILE_SET}=\"apple-t2.conf\", ENV{ACP_PROFILE_SET}=\"apple-t2.conf\" LABEL=\"pulseaudio_end\" Note: The updated locations for the files in the links above for Pipewire distributions will be: /usr/share/alsa/cards/AppleT2.conf /usr/share/alsa-card-profile/mixer/profile-sets/apple-t2.conf /usr/lib/udev/rules.d/91-pulseaudio-custom.rules Issues \u00b6 Some people are unable to get audio input to work. You may have to use a separate microphone. All of apple's fancy tuning of the speakers is done in macOS, we don't have anything like that at the moment. Approaches to fixing low microphone volume \u00b6 Pulseaudio (2019 16\" MacBook Pro) \u00b6 Monitor the volume of the microphone and set it back to 400% when a sudden drop in the volume of the microphone occurs (something sets in to 100%. This will help to have consistent microphone volume during video/audio calls. KDE \u00b6 The \"Audio Volume\" dialog / Audio in System Settings allow users to \"Raise maximum volume\", allowing to go past 100%. This does not offer a great deal of flexibility, it might work for getting acceptable recordings however. EasyEffects with Pipewire \u00b6 EasyEffects is a tool to control and modify audio streams when using pipewire. Compared to the KDE approach mentioned above using input plugins like \"Autogain\" offers a lot more fine grain control and higher volume boosts.","title":"Audio"},{"location":"guides/audio-config/#introduction","text":"This page explains how to get the config files for using the T2 audio device, which allows use of the 3.5mm headphone port, the built in speakers, the built in mic and the headphones' mic. Before you proceed, make sure you already have apple_bce loaded by running lsmod | grep apple_bce . If not, follow the instructions on how to setup the BCE module .","title":"Introduction"},{"location":"guides/audio-config/#enable-pass-through-kernel-parameters","text":"Cat cat /proc/cmdline and ensure that your kernel parameters contain intel_iommu=on iommu=pt pcie_ports=compat . If not present, you'll have to update your bootup kernel params: edit /etc/default/grub and update GRUB_CMDLINE_LINUX to include intel_iommu=on iommu=pt pcie_ports=compat Apply your edits by running sudo update-grub on ubuntu or sudo grub-mkconfig -o /boot/grub/grub.cfg for other distros Reboot and ensure cat /proc/cmdline contains those params systemd-boot If you use systemd-boot you'll instead edit your boot conf files to add intel_iommu=on iommu=pt pcie_ports=compat to the options line. The files to edit will have the .conf extension and be in the loader/entries/ folder on your EFI partition. This will most likely be /boot/efi/loader/entries","title":"Enable Pass-Through Kernel Parameters"},{"location":"guides/audio-config/#audio-configuration-files","text":"In most scenarios, you should use these files , following the instructions in that gist's README.md . Special scenarios are: 2019 16\" MacBook Pro audio files - that laptop has 6 speakers and needs slightly different config 2020 13\" MacBook Air audio files","title":"Audio Configuration Files"},{"location":"guides/audio-config/#using-pipewire-instead-of-pulseaudio","text":"You'll need to modify the /lib/udev/rules.d/91-pulseaudio-custom.rules file from the links above. SUBSYSTEM!=\"sound\", GOTO=\"pulseaudio_end\" ACTION!=\"change\", GOTO=\"pulseaudio_end\" KERNEL!=\"card*\", GOTO=\"pulseaudio_end\" -SUBSYSTEMS==\"pci\", ATTRS{vendor}==\"0x106b\", ATTRS{device}==\"0x1803\", ENV{PULSE_PROFILE_SET}=\"apple-t2.conf\" +SUBSYSTEMS==\"pci\", ATTRS{vendor}==\"0x106b\", ATTRS{device}==\"0x1803\", ENV{PULSE_PROFILE_SET}=\"apple-t2.conf\", ENV{ACP_PROFILE_SET}=\"apple-t2.conf\" LABEL=\"pulseaudio_end\" Note: The updated locations for the files in the links above for Pipewire distributions will be: /usr/share/alsa/cards/AppleT2.conf /usr/share/alsa-card-profile/mixer/profile-sets/apple-t2.conf /usr/lib/udev/rules.d/91-pulseaudio-custom.rules","title":"Using Pipewire instead of Pulseaudio"},{"location":"guides/audio-config/#issues","text":"Some people are unable to get audio input to work. You may have to use a separate microphone. All of apple's fancy tuning of the speakers is done in macOS, we don't have anything like that at the moment.","title":"Issues"},{"location":"guides/audio-config/#approaches-to-fixing-low-microphone-volume","text":"","title":"Approaches to fixing low microphone volume"},{"location":"guides/audio-config/#pulseaudio-2019-16-macbook-pro","text":"Monitor the volume of the microphone and set it back to 400% when a sudden drop in the volume of the microphone occurs (something sets in to 100%. This will help to have consistent microphone volume during video/audio calls.","title":"Pulseaudio (2019 16\" MacBook Pro)"},{"location":"guides/audio-config/#kde","text":"The \"Audio Volume\" dialog / Audio in System Settings allow users to \"Raise maximum volume\", allowing to go past 100%. This does not offer a great deal of flexibility, it might work for getting acceptable recordings however.","title":"KDE"},{"location":"guides/audio-config/#easyeffects-with-pipewire","text":"EasyEffects is a tool to control and modify audio streams when using pipewire. Compared to the KDE approach mentioned above using input plugins like \"Autogain\" offers a lot more fine grain control and higher volume boosts.","title":"EasyEffects with Pipewire"},{"location":"guides/dkms/","text":"Introduction \u00b6 This page explains how to install the kernel modules for the Keyboard, Audio, Touchbar and the Ambient Light sensor with DKMS. You will need a patched kernel. Do you need to do this? \u00b6 Are your keyboard and audio working? If no, then you'll need the BCE module. If you have a Touchbar, is it working? If no, then you'll need the apple-ibridge module. To get started with this guide, first install the dkms package. You may have been using an outdated kernel or your distribution may have been using kernel modules that do not match the ones listed below (check using dkms status or ls -l /usr/src ). If the version of apple-bce in the output is 0.1 , you have to uninstall the old modules first to avoid any compatibility issues by running: sudo dkms uninstall -m apple-bce -v 0 .1 sudo dkms uninstall -m apple-ibridge -v 0 .1 sudo rm -r /usr/src/apple-bce-0.1 sudo rm -r /usr/src/apple-ibridge-0.1 sudo rm -r /var/lib/dkms/apple-bce sudo rm -r /var/lib/dkms/apple-ibridge Installing modules \u00b6 Installing the BCE (Buffer Copy Engine) module for Keyboard and Audio If you are on arch, you can use Aunali1's apple-bce-dkms-git package Otherwise, run sudo git clone https://github.com/t2linux/apple-bce-drv /usr/src/apple-bce-0.2 Create a dkms.conf file in /usr/src/apple-bce-0.2 and put in the following: PACKAGE_NAME=\"apple-bce\" PACKAGE_VERSION=\"0.2\" MAKE[0]=\"make KVERSION=$kernelver\" CLEAN=\"make clean\" BUILT_MODULE_NAME[0]=\"apple-bce\" DEST_MODULE_LOCATION[0]=\"/kernel/drivers/misc\" AUTOINSTALL=\"yes\" Now run sudo dkms install -m apple-bce -v 0.2 . If on a live ISO, use sudo dkms install -m apple-bce -v 0.2 -k x.x.x-mbp instead and change x.x.x-mbp to the kernel that you have installed, as by default dkms will try to build the module for the kernel that the live iso is using, which will most likely be older. Installing the Touchbar and Ambient Light sensor modules If you are on a MacBook Pro (16 inch, 2019) or MacBook Pro (13 inch, 2020), and want keyboard backlight to work, run : sudo git clone https://github.com/Redecorating/apple-ib-drv /usr/src/apple-ibridge-0.1 Else run : sudo git clone https://github.com/t2linux/apple-ib-drv /usr/src/apple-ibridge-0.1 Now run sudo dkms install -m apple-ibridge -v 0.1 . If on a live ISO, use sudo dkms install -m apple-ibridge -v 0.1 -k x.x.x-mbp instead and change x.x.x-mbp to the kernel that you have installed, as by default dkms will try to build the module for the kernel that the live iso is using, which will most likely be older. Load the modules into the kernel Note This is only necessary if you wish to use the modules right away. If you are installing modules from a live iso the commands will fail as the modules have only been installed for the kernel you specified. sudo modprobe apple_bce sudo modprobe apple_ib_tb sudo modprobe apple_ib_als The Touchbar and keyboard should be working. For audio, you'll also need some config files, refer to the Audio Config guide . Make modules load on boot \u00b6 Ubuntu Ubuntu users may skip this step as it's already set up in their distro. If the modules are still not loading on boot, then you may follow this section. echo apple-bce | sudo tee /etc/modules-load.d/t2.conf Make modules load on early boot \u00b6 Having the apple-bce module loaded early allows the use of the keyboard for decrypting encrypted volumes (LUKS). It also is useful when boot doesn't work, and the keyboard is required for debugging. To do this, one must ensure the apple-bce module as well as its dependent modules are included in the initial ram disk. If your distro uses initramfs-tools (all debian-based distros), then /etc/initramfs-tools/modules stores a list of extra modules to be included and loaded at early boot time: cat <<EOF >> /etc/initramfs-tools/modules # Required modules for getting the built-in apple keyboard to work: snd snd_pcm apple-bce EOF Other distros use a different initramfs module loading mechanism. For example in Arch ensure that the /etc/mkinitcpio.conf file has: MODULES = \"apple-bce\" And then run sudo mkinitcpio -P . See your distro-specific instructions for configuring apple-bce to added to your initramfs. Setting up the Touch Bar \u00b6 The Touch Bar can be set up by running this script in Linux using bash /path/to/script . Make sure your Linux kernel and macOS is updated before running this script. If you are running Ubuntu , its recommended to run the following as well and rebooting :- sudo rm /etc/modprobe.d/apple-touchbar.conf sudo rm /etc/modules-load.d/apple-bce.conf sudo rm /etc/modules-load.d/applespi.conf echo apple-bce | sudo tee /etc/modules-load.d/t2.conf After running this script, if you wish to change the default mode of the Touch Bar, run sudo touchbar and choose the mode you wish. In case your Touch Bar is unable to change modes on pressing the fn key, you could try the following :- Try adding usbhid.quirks=0x05ac:0x8302:0x80000 as a Kernel Parameter using your Bootloader. Try running the following and rebooting. echo -e \"# delay loading of the touchbar driver\\ninstall apple-ib-tb /bin/sleep 7; /sbin/modprobe --ignore-install apple-ib-tb\" | sudo tee /etc/modprobe.d/delay-tb.conf >/dev/null Boot into the macOS Recovery and then restart into Linux. Unplug all the external USB keyboards and mouse and then restart into Linux, keeping them unplugged. If you still face an issue, mention it here or on the discord. Fixing Suspend \u00b6 Copy this script to /lib/systemd/system-sleep/rmmod_tb.sh Now run :- sudo chmod 755 /lib/systemd/system-sleep/rmmod_tb.sh sudo chown root:root /lib/systemd/system-sleep/rmmod_tb.sh It unloads the Touchbar modules as they can cause issues for suspend. Your keyboard backlight may remain switched off on resuming and backlight controls may stop working. A restart fixes the backlight controls. You may also run echo 60 > /sys/class/leds/apple::kbd_backlight/brightness to turn on the backlight to the maximum level if you do not want to boot. Replace 60 with a lower number for lower brightness. Kernel panic when loading apple-ib-als \u00b6 This was fixed in this commit , please follow the dkms guide to update. Use ambient light sensor to automatically change brightness (if not working already) \u00b6 You can use this script . Make sure you have the apple-ib-als module loaded.","title":"DKMS"},{"location":"guides/dkms/#introduction","text":"This page explains how to install the kernel modules for the Keyboard, Audio, Touchbar and the Ambient Light sensor with DKMS. You will need a patched kernel.","title":"Introduction"},{"location":"guides/dkms/#do-you-need-to-do-this","text":"Are your keyboard and audio working? If no, then you'll need the BCE module. If you have a Touchbar, is it working? If no, then you'll need the apple-ibridge module. To get started with this guide, first install the dkms package. You may have been using an outdated kernel or your distribution may have been using kernel modules that do not match the ones listed below (check using dkms status or ls -l /usr/src ). If the version of apple-bce in the output is 0.1 , you have to uninstall the old modules first to avoid any compatibility issues by running: sudo dkms uninstall -m apple-bce -v 0 .1 sudo dkms uninstall -m apple-ibridge -v 0 .1 sudo rm -r /usr/src/apple-bce-0.1 sudo rm -r /usr/src/apple-ibridge-0.1 sudo rm -r /var/lib/dkms/apple-bce sudo rm -r /var/lib/dkms/apple-ibridge","title":"Do you need to do this?"},{"location":"guides/dkms/#installing-modules","text":"Installing the BCE (Buffer Copy Engine) module for Keyboard and Audio If you are on arch, you can use Aunali1's apple-bce-dkms-git package Otherwise, run sudo git clone https://github.com/t2linux/apple-bce-drv /usr/src/apple-bce-0.2 Create a dkms.conf file in /usr/src/apple-bce-0.2 and put in the following: PACKAGE_NAME=\"apple-bce\" PACKAGE_VERSION=\"0.2\" MAKE[0]=\"make KVERSION=$kernelver\" CLEAN=\"make clean\" BUILT_MODULE_NAME[0]=\"apple-bce\" DEST_MODULE_LOCATION[0]=\"/kernel/drivers/misc\" AUTOINSTALL=\"yes\" Now run sudo dkms install -m apple-bce -v 0.2 . If on a live ISO, use sudo dkms install -m apple-bce -v 0.2 -k x.x.x-mbp instead and change x.x.x-mbp to the kernel that you have installed, as by default dkms will try to build the module for the kernel that the live iso is using, which will most likely be older. Installing the Touchbar and Ambient Light sensor modules If you are on a MacBook Pro (16 inch, 2019) or MacBook Pro (13 inch, 2020), and want keyboard backlight to work, run : sudo git clone https://github.com/Redecorating/apple-ib-drv /usr/src/apple-ibridge-0.1 Else run : sudo git clone https://github.com/t2linux/apple-ib-drv /usr/src/apple-ibridge-0.1 Now run sudo dkms install -m apple-ibridge -v 0.1 . If on a live ISO, use sudo dkms install -m apple-ibridge -v 0.1 -k x.x.x-mbp instead and change x.x.x-mbp to the kernel that you have installed, as by default dkms will try to build the module for the kernel that the live iso is using, which will most likely be older. Load the modules into the kernel Note This is only necessary if you wish to use the modules right away. If you are installing modules from a live iso the commands will fail as the modules have only been installed for the kernel you specified. sudo modprobe apple_bce sudo modprobe apple_ib_tb sudo modprobe apple_ib_als The Touchbar and keyboard should be working. For audio, you'll also need some config files, refer to the Audio Config guide .","title":"Installing modules"},{"location":"guides/dkms/#make-modules-load-on-boot","text":"Ubuntu Ubuntu users may skip this step as it's already set up in their distro. If the modules are still not loading on boot, then you may follow this section. echo apple-bce | sudo tee /etc/modules-load.d/t2.conf","title":"Make modules load on boot"},{"location":"guides/dkms/#make-modules-load-on-early-boot","text":"Having the apple-bce module loaded early allows the use of the keyboard for decrypting encrypted volumes (LUKS). It also is useful when boot doesn't work, and the keyboard is required for debugging. To do this, one must ensure the apple-bce module as well as its dependent modules are included in the initial ram disk. If your distro uses initramfs-tools (all debian-based distros), then /etc/initramfs-tools/modules stores a list of extra modules to be included and loaded at early boot time: cat <<EOF >> /etc/initramfs-tools/modules # Required modules for getting the built-in apple keyboard to work: snd snd_pcm apple-bce EOF Other distros use a different initramfs module loading mechanism. For example in Arch ensure that the /etc/mkinitcpio.conf file has: MODULES = \"apple-bce\" And then run sudo mkinitcpio -P . See your distro-specific instructions for configuring apple-bce to added to your initramfs.","title":"Make modules load on early boot"},{"location":"guides/dkms/#setting-up-the-touch-bar","text":"The Touch Bar can be set up by running this script in Linux using bash /path/to/script . Make sure your Linux kernel and macOS is updated before running this script. If you are running Ubuntu , its recommended to run the following as well and rebooting :- sudo rm /etc/modprobe.d/apple-touchbar.conf sudo rm /etc/modules-load.d/apple-bce.conf sudo rm /etc/modules-load.d/applespi.conf echo apple-bce | sudo tee /etc/modules-load.d/t2.conf After running this script, if you wish to change the default mode of the Touch Bar, run sudo touchbar and choose the mode you wish. In case your Touch Bar is unable to change modes on pressing the fn key, you could try the following :- Try adding usbhid.quirks=0x05ac:0x8302:0x80000 as a Kernel Parameter using your Bootloader. Try running the following and rebooting. echo -e \"# delay loading of the touchbar driver\\ninstall apple-ib-tb /bin/sleep 7; /sbin/modprobe --ignore-install apple-ib-tb\" | sudo tee /etc/modprobe.d/delay-tb.conf >/dev/null Boot into the macOS Recovery and then restart into Linux. Unplug all the external USB keyboards and mouse and then restart into Linux, keeping them unplugged. If you still face an issue, mention it here or on the discord.","title":"Setting up the Touch Bar"},{"location":"guides/dkms/#fixing-suspend","text":"Copy this script to /lib/systemd/system-sleep/rmmod_tb.sh Now run :- sudo chmod 755 /lib/systemd/system-sleep/rmmod_tb.sh sudo chown root:root /lib/systemd/system-sleep/rmmod_tb.sh It unloads the Touchbar modules as they can cause issues for suspend. Your keyboard backlight may remain switched off on resuming and backlight controls may stop working. A restart fixes the backlight controls. You may also run echo 60 > /sys/class/leds/apple::kbd_backlight/brightness to turn on the backlight to the maximum level if you do not want to boot. Replace 60 with a lower number for lower brightness.","title":"Fixing Suspend"},{"location":"guides/dkms/#kernel-panic-when-loading-apple-ib-als","text":"This was fixed in this commit , please follow the dkms guide to update.","title":"Kernel panic when loading apple-ib-als"},{"location":"guides/dkms/#use-ambient-light-sensor-to-automatically-change-brightness-if-not-working-already","text":"You can use this script . Make sure you have the apple-ib-als module loaded.","title":"Use ambient light sensor to automatically change brightness (if not working already)"},{"location":"guides/fan/","text":"Introduction \u00b6 This page is a step by step guide to get fan control working on t2 Macs. In some Macs, the fan has been found to work out of the box. In such a case the driver is not required until you want to force a certain speed or do some other configuration which can be done by the help of this driver. Steps \u00b6 Clone the repository into a directory of your choice git clone https://github.com/networkException/mbpfan cd mbpfan Compile the daemon using make Note This will run a patch script that finds a fan device on your system. You can use its output for debug purposes Run the tests to confirm that everything is working sudo make tests If the tests ran successfully, install using sudo make install Now enable starting at boot sudo cp mbpfan.service /etc/systemd/system/ sudo systemctl enable mbpfan.service sudo systemctl daemon-reload sudo systemctl start mbpfan.service Configuration \u00b6 The daemons config file can be found at /etc/mbpfan.conf . Uncommenting and setting min_fan1_speed for example will let you force a certain speed.","title":"Fan"},{"location":"guides/fan/#introduction","text":"This page is a step by step guide to get fan control working on t2 Macs. In some Macs, the fan has been found to work out of the box. In such a case the driver is not required until you want to force a certain speed or do some other configuration which can be done by the help of this driver.","title":"Introduction"},{"location":"guides/fan/#steps","text":"Clone the repository into a directory of your choice git clone https://github.com/networkException/mbpfan cd mbpfan Compile the daemon using make Note This will run a patch script that finds a fan device on your system. You can use its output for debug purposes Run the tests to confirm that everything is working sudo make tests If the tests ran successfully, install using sudo make install Now enable starting at boot sudo cp mbpfan.service /etc/systemd/system/ sudo systemctl enable mbpfan.service sudo systemctl daemon-reload sudo systemctl start mbpfan.service","title":"Steps"},{"location":"guides/fan/#configuration","text":"The daemons config file can be found at /etc/mbpfan.conf . Uncommenting and setting min_fan1_speed for example will let you force a certain speed.","title":"Configuration"},{"location":"guides/hybrid-graphics/","text":"Introduction \u00b6 This page describes how to use the iGPU on MacBookPro's with Hybrid Graphics (2 GPUs). 13 inch MacBooks only have an iGPU, and do not need this. Using the iGPU means you can save power by turning off the more powerful AMD dGPU when you don't need it. This has been tested on the MacBookPro16,1 and the MacBookPro15,1. The 15,3 and 16,4 models are very similar and should work too. Issues \u00b6 Resume after suspend is broken, as the GMUX (graphics multiplexer) doesn't connect the iGPU to the display after resuming. For this to be fixed, a Linux driver for acpi:APP000B:GPUC: needs to be written (macOS uses AppleMuxControl2.kext). The extra battery life may make this a worthwhile trade-off (about 3 hours to almost 6 hours on a MacBookPro16,1) If using DRI_PRIME=1 on programs causes system crashes, with \" CPU CATERR \" problem reports in macOS, disable dynamic power management with the amdgpu.dpm=0 kernel argument, or echo high | sudo tee /sys/bus/pci/drivers/amdgpu/0000:??:??.?/power_dpm_force_performance_level . If apple-set-os is loaded, the iGPU will control display brightness, and if the iGPU isn't the boot gpu, the i915 Intel graphics driver will not load, and the display brightness cannot be changed (The exception to this is sometimes when rebooting from macOS Recovery etc, i915 loads fine). Enabling the iGPU \u00b6 Note Aside from step 1, these instructions should be followed in Linux. Update macOS. Big Sur and above can boot when the iGPU is set as the boot GPU, but this has not been tested on Catalina, and on older MacBooks , setting the iGPU as the boot GPU has stopped macOS from booting properly with graphics, and it is unknown when this was fixed (you might want to turn ssh on in macOS if you are worried about this). Set up apple-set-os-loader to make Apple's firmware show the iGPU Compile apple-set-os loader. These instructions assume you have gnu-efi installed, and mount your EFI partition on /boot/efi . If you mount the EFI partition somewhere else or use refind, you will need to replace /boot/efi with the mount point of the partition in which your bootloader is installed. git clone https://github.com/aa15032261/apple_set_os-loader cd apple_set_os-loader make sudo mv /boot/efi/efi/boot/bootx64.efi /boot/efi/efi/boot/bootx64_original.efi sudo cp ./bootx64.efi /boot/efi/efi/boot/bootx64.efi Reboot to Linux, you should see this at boot (the GPUs listed might be different): ================== apple_set_os loader v0.5 ================== SetOsProtocol Handle Count: 1 AppleSetOs will be loaded, press Z to disable. ----------------------- Ready to boot ------------------------ Plug in your eGPU then press any key. Booting bootx64_original.efi in 6 second(s) Connected Graphics Cards: 1002 7340 AMD - Navi 14 [Radeon RX 5500/5500M] 8086 3E9B INTEL - UHD Graphics 630 (Mobile) Press any key other than z or wait, and it should boot you into Linux. If you want a silent version of this that doesn't wait for input, you can use this fork . Your display brightness controls may stop working, this is temporary. lspci -s 00:02.0 should list an Intel Graphics card. If it doesn't have the Intel card, then the next step will not work. Set the gpu-power-prefs NVRAM variable to make the iGPU the Boot GPU. Check journalctl -k --grep=efi: , if you don't have \"efi: Apple Mac detected, using EFI v1.10 runtime services only\" then you will need update your kernel (preferred) or refer this older version of this page. If cat /proc/cmdline has efi=noruntime , remove it from the kernel command line by editing and regenerating your bootloader config (the issue it was avoiding is fixed by newer kernels). Install the gpu-switch script, and then you can set NVRAM and the boot GPU from Linux. curl https://raw.githubusercontent.com/0xbb/gpu-switch/master/gpu-switch > gpu-switch chmod +x gpu-switch sudo chown root:root gpu-switch sudo mv gpu-switch /usr/local/bin/ sudo gpu-switch -i Reboot into Linux. Display brightness should be working again if it wasn't, and glxinfo | grep \"OpenGL renderer\" should show an Intel GPU. Running programs with DRI_PRIME=1 will make them render on your AMDGPU (some things do this automatically). You will get more battery time now as your AMD GPU can be turned off when not needed. Use on Windows \u00b6 In one case (has anyone else tried this?), the iGPU only works on Windows if there's no driver for it installed. Windows likes installing drivers. There might be special iGPU drivers in the Bootcamp support software for single GPU MacBooks, which might help resolve this. If you want to use the iGPU on Linux but not on Windows, you can switch back to the dGPU with sudo gpu-switch -d before booting to Windows. If you want to switch GPU from Windows, use 0xbb's gpu-switch script. VFIO GPU passthrough \u00b6 Refer to this gist for quirks required to pass through the dGPU to a Windows Virtual Machine, while having Linux use the iGPU.","title":"Hybrid Graphics"},{"location":"guides/hybrid-graphics/#introduction","text":"This page describes how to use the iGPU on MacBookPro's with Hybrid Graphics (2 GPUs). 13 inch MacBooks only have an iGPU, and do not need this. Using the iGPU means you can save power by turning off the more powerful AMD dGPU when you don't need it. This has been tested on the MacBookPro16,1 and the MacBookPro15,1. The 15,3 and 16,4 models are very similar and should work too.","title":"Introduction"},{"location":"guides/hybrid-graphics/#issues","text":"Resume after suspend is broken, as the GMUX (graphics multiplexer) doesn't connect the iGPU to the display after resuming. For this to be fixed, a Linux driver for acpi:APP000B:GPUC: needs to be written (macOS uses AppleMuxControl2.kext). The extra battery life may make this a worthwhile trade-off (about 3 hours to almost 6 hours on a MacBookPro16,1) If using DRI_PRIME=1 on programs causes system crashes, with \" CPU CATERR \" problem reports in macOS, disable dynamic power management with the amdgpu.dpm=0 kernel argument, or echo high | sudo tee /sys/bus/pci/drivers/amdgpu/0000:??:??.?/power_dpm_force_performance_level . If apple-set-os is loaded, the iGPU will control display brightness, and if the iGPU isn't the boot gpu, the i915 Intel graphics driver will not load, and the display brightness cannot be changed (The exception to this is sometimes when rebooting from macOS Recovery etc, i915 loads fine).","title":"Issues"},{"location":"guides/hybrid-graphics/#enabling-the-igpu","text":"Note Aside from step 1, these instructions should be followed in Linux. Update macOS. Big Sur and above can boot when the iGPU is set as the boot GPU, but this has not been tested on Catalina, and on older MacBooks , setting the iGPU as the boot GPU has stopped macOS from booting properly with graphics, and it is unknown when this was fixed (you might want to turn ssh on in macOS if you are worried about this). Set up apple-set-os-loader to make Apple's firmware show the iGPU Compile apple-set-os loader. These instructions assume you have gnu-efi installed, and mount your EFI partition on /boot/efi . If you mount the EFI partition somewhere else or use refind, you will need to replace /boot/efi with the mount point of the partition in which your bootloader is installed. git clone https://github.com/aa15032261/apple_set_os-loader cd apple_set_os-loader make sudo mv /boot/efi/efi/boot/bootx64.efi /boot/efi/efi/boot/bootx64_original.efi sudo cp ./bootx64.efi /boot/efi/efi/boot/bootx64.efi Reboot to Linux, you should see this at boot (the GPUs listed might be different): ================== apple_set_os loader v0.5 ================== SetOsProtocol Handle Count: 1 AppleSetOs will be loaded, press Z to disable. ----------------------- Ready to boot ------------------------ Plug in your eGPU then press any key. Booting bootx64_original.efi in 6 second(s) Connected Graphics Cards: 1002 7340 AMD - Navi 14 [Radeon RX 5500/5500M] 8086 3E9B INTEL - UHD Graphics 630 (Mobile) Press any key other than z or wait, and it should boot you into Linux. If you want a silent version of this that doesn't wait for input, you can use this fork . Your display brightness controls may stop working, this is temporary. lspci -s 00:02.0 should list an Intel Graphics card. If it doesn't have the Intel card, then the next step will not work. Set the gpu-power-prefs NVRAM variable to make the iGPU the Boot GPU. Check journalctl -k --grep=efi: , if you don't have \"efi: Apple Mac detected, using EFI v1.10 runtime services only\" then you will need update your kernel (preferred) or refer this older version of this page. If cat /proc/cmdline has efi=noruntime , remove it from the kernel command line by editing and regenerating your bootloader config (the issue it was avoiding is fixed by newer kernels). Install the gpu-switch script, and then you can set NVRAM and the boot GPU from Linux. curl https://raw.githubusercontent.com/0xbb/gpu-switch/master/gpu-switch > gpu-switch chmod +x gpu-switch sudo chown root:root gpu-switch sudo mv gpu-switch /usr/local/bin/ sudo gpu-switch -i Reboot into Linux. Display brightness should be working again if it wasn't, and glxinfo | grep \"OpenGL renderer\" should show an Intel GPU. Running programs with DRI_PRIME=1 will make them render on your AMDGPU (some things do this automatically). You will get more battery time now as your AMD GPU can be turned off when not needed.","title":"Enabling the iGPU"},{"location":"guides/hybrid-graphics/#use-on-windows","text":"In one case (has anyone else tried this?), the iGPU only works on Windows if there's no driver for it installed. Windows likes installing drivers. There might be special iGPU drivers in the Bootcamp support software for single GPU MacBooks, which might help resolve this. If you want to use the iGPU on Linux but not on Windows, you can switch back to the dGPU with sudo gpu-switch -d before booting to Windows. If you want to switch GPU from Windows, use 0xbb's gpu-switch script.","title":"Use on Windows"},{"location":"guides/hybrid-graphics/#vfio-gpu-passthrough","text":"Refer to this gist for quirks required to pass through the dGPU to a Windows Virtual Machine, while having Linux use the iGPU.","title":"VFIO GPU passthrough"},{"location":"guides/kernel/","text":"Kernel \u00b6 This page explains how to compile a Linux kernel with patches for T2 hardware support and with apple-bce + apple-ibridge included (so no need to follow the DKMS guide for this kernel). If you have issues, make sure you are running the commands here with bash . If your distro is not one of the distros with documentation on this Wiki, you may not need to compile a kernel yourself to get support for T2 hardware. Debian based systems can use the same kernel as described in the Ubuntu section, Arch based systems can use the same kernel as described in the Arch section, etc. Requirements \u00b6 You will need some packages to build the kernel: Arch based systems: sudo pacman --needed -S bc kmod libelf pahole cpio perl tar xz git Debian based systems: sudo apt install build-essential libncurses-dev libssl-dev flex bison libelf-dev bc dwarves openssl For other distros you will need the equivalent of these, but if you miss something you'll most likely get an error saying what's missing, and you can then install it and re-run make to continue where you left off. You will need about 20GB of disk space to compile the kernel. If you have a large amount of ram, you could use tmpfs to store build files in ram. Building kernel \u00b6 Getting kernel source and applying patches \u00b6 Hint The kernel source will be downloaded with HTTP S , but if you would like to be extra careful and verify the kernel source code with gpg , please refer to this page . mkdir build && cd build git clone --depth = 1 https://github.com/Redecorating/mbp-16.1-linux-wifi patches source patches/PKGBUILD wget https://www.kernel.org/pub/linux/kernel/v ${ pkgver //.* } .x/linux- ${ pkgver } .tar.xz tar xf $_srcname .tar.xz cd $_srcname git clone --depth = 1 https://github.com/t2linux/apple-bce-drv drivers/staging/apple-bce git clone --depth = 1 https://github.com/t2linux/apple-ib-drv drivers/staging/apple-ibridge for patch in ../patches/*.patch ; do patch -Np1 < $patch done Setting kernel configuration \u00b6 Using config from lower kernel versions We will use the config of the kernel that is currently running. If your running kernel is an older longterm/stable kernel, it's possible that some of the default choices for new options added to the kernel might not be what you want. You can replace make olddefconfig in the code block below with make oldconfig if you want to manually set new options. You can always later use make menuconfig to change kernel config options if you have issues. zcat /proc/config.gz > .config make olddefconfig scripts/config --module apple-ibridge scripts/config --module apple-bce Building \u00b6 This may take 2-3 hours to build depending on your CPU and the kernel config. Incremental builds If you control-c to stop the build process, you may continue where you left off by running make again. If you build the kernel, and realise you want to make more changes to the code or config, re-running make will only rebuild bits that you changed. make -j $( nproc ) Installing \u00b6 export MAKEFLAGS = -j $( nproc ) sudo make modules_install sudo make install If sudo make install said \"Cannot find LILO.\", that's fine. Look at the output from sudo make install . If it mentioned creating an initramfs or an initrd, a script provided by your distro has done the next step for you. The same goes for if it mentions updating grub or systemd-boot or bootloader config. This distro script would be at /sbin/updatekernel . Initramfs/Initrd \u00b6 Next we must create an initramfs/initrd (Initial RAM Filesystem / Initial RAM Disk). As mentioned in the previous step, this may have been automatically done for you. For most arch based systems: sudo mkinitcpio -k /boot/vmlinuz -c /etc/mkinitcpio.conf -g /boot/initramfs.img For other distros, refer to your distro's documentation if this wasn't done by make install earlier. Adding new kernel to bootloader config \u00b6 Again, sudo make install may have done this for you. Grub \u00b6 Edit /etc/default/grub and set GRUB_TIMEOUT=3 (You can pick a different amount of seconds), and GRUB_TIMEOUT_STYLE=menu sudo grub-mkconfig -o /boot/grub/grub.cfg Systemd-boot \u00b6 Make a copy of any .conf file in /boot/loader/entries/ and name it something like linux.conf Edit the file you just created and change the linux and initrd lines like this, but leave any initrd lines with ucode . Also change the title to something different. title Linux Custom linux /vmlinuz initrd /initramfs.img Edit /boot/loader/loader.conf and make sure the timeout is 1 or higher, and if you want you can change the default to the name of the file you created in step 1. Rebooting \u00b6 When you reboot, you should either now have the new kernel as the default, or be able to select it with up and down arrow keys and enter. You can check uname -r to see the kernel version that you are currently running. Hint You also can use kexec to start the new kernel without a full reboot which is quicker if you are rebuilding the kernel repeatedly. sudo kexec -l /boot/vmlinuz --initrd=/boot/initramfs.img --reuse-cmdline && systemctl kexec","title":"Kernel"},{"location":"guides/kernel/#kernel","text":"This page explains how to compile a Linux kernel with patches for T2 hardware support and with apple-bce + apple-ibridge included (so no need to follow the DKMS guide for this kernel). If you have issues, make sure you are running the commands here with bash . If your distro is not one of the distros with documentation on this Wiki, you may not need to compile a kernel yourself to get support for T2 hardware. Debian based systems can use the same kernel as described in the Ubuntu section, Arch based systems can use the same kernel as described in the Arch section, etc.","title":"Kernel"},{"location":"guides/kernel/#requirements","text":"You will need some packages to build the kernel: Arch based systems: sudo pacman --needed -S bc kmod libelf pahole cpio perl tar xz git Debian based systems: sudo apt install build-essential libncurses-dev libssl-dev flex bison libelf-dev bc dwarves openssl For other distros you will need the equivalent of these, but if you miss something you'll most likely get an error saying what's missing, and you can then install it and re-run make to continue where you left off. You will need about 20GB of disk space to compile the kernel. If you have a large amount of ram, you could use tmpfs to store build files in ram.","title":"Requirements"},{"location":"guides/kernel/#building-kernel","text":"","title":"Building kernel"},{"location":"guides/kernel/#getting-kernel-source-and-applying-patches","text":"Hint The kernel source will be downloaded with HTTP S , but if you would like to be extra careful and verify the kernel source code with gpg , please refer to this page . mkdir build && cd build git clone --depth = 1 https://github.com/Redecorating/mbp-16.1-linux-wifi patches source patches/PKGBUILD wget https://www.kernel.org/pub/linux/kernel/v ${ pkgver //.* } .x/linux- ${ pkgver } .tar.xz tar xf $_srcname .tar.xz cd $_srcname git clone --depth = 1 https://github.com/t2linux/apple-bce-drv drivers/staging/apple-bce git clone --depth = 1 https://github.com/t2linux/apple-ib-drv drivers/staging/apple-ibridge for patch in ../patches/*.patch ; do patch -Np1 < $patch done","title":"Getting kernel source and applying patches"},{"location":"guides/kernel/#setting-kernel-configuration","text":"Using config from lower kernel versions We will use the config of the kernel that is currently running. If your running kernel is an older longterm/stable kernel, it's possible that some of the default choices for new options added to the kernel might not be what you want. You can replace make olddefconfig in the code block below with make oldconfig if you want to manually set new options. You can always later use make menuconfig to change kernel config options if you have issues. zcat /proc/config.gz > .config make olddefconfig scripts/config --module apple-ibridge scripts/config --module apple-bce","title":"Setting kernel configuration"},{"location":"guides/kernel/#building","text":"This may take 2-3 hours to build depending on your CPU and the kernel config. Incremental builds If you control-c to stop the build process, you may continue where you left off by running make again. If you build the kernel, and realise you want to make more changes to the code or config, re-running make will only rebuild bits that you changed. make -j $( nproc )","title":"Building"},{"location":"guides/kernel/#installing","text":"export MAKEFLAGS = -j $( nproc ) sudo make modules_install sudo make install If sudo make install said \"Cannot find LILO.\", that's fine. Look at the output from sudo make install . If it mentioned creating an initramfs or an initrd, a script provided by your distro has done the next step for you. The same goes for if it mentions updating grub or systemd-boot or bootloader config. This distro script would be at /sbin/updatekernel .","title":"Installing"},{"location":"guides/kernel/#initramfsinitrd","text":"Next we must create an initramfs/initrd (Initial RAM Filesystem / Initial RAM Disk). As mentioned in the previous step, this may have been automatically done for you. For most arch based systems: sudo mkinitcpio -k /boot/vmlinuz -c /etc/mkinitcpio.conf -g /boot/initramfs.img For other distros, refer to your distro's documentation if this wasn't done by make install earlier.","title":"Initramfs/Initrd"},{"location":"guides/kernel/#adding-new-kernel-to-bootloader-config","text":"Again, sudo make install may have done this for you.","title":"Adding new kernel to bootloader config"},{"location":"guides/kernel/#grub","text":"Edit /etc/default/grub and set GRUB_TIMEOUT=3 (You can pick a different amount of seconds), and GRUB_TIMEOUT_STYLE=menu sudo grub-mkconfig -o /boot/grub/grub.cfg","title":"Grub"},{"location":"guides/kernel/#systemd-boot","text":"Make a copy of any .conf file in /boot/loader/entries/ and name it something like linux.conf Edit the file you just created and change the linux and initrd lines like this, but leave any initrd lines with ucode . Also change the title to something different. title Linux Custom linux /vmlinuz initrd /initramfs.img Edit /boot/loader/loader.conf and make sure the timeout is 1 or higher, and if you want you can change the default to the name of the file you created in step 1.","title":"Systemd-boot"},{"location":"guides/kernel/#rebooting","text":"When you reboot, you should either now have the new kernel as the default, or be able to select it with up and down arrow keys and enter. You can check uname -r to see the kernel version that you are currently running. Hint You also can use kexec to start the new kernel without a full reboot which is quicker if you are rebuilding the kernel repeatedly. sudo kexec -l /boot/vmlinuz --initrd=/boot/initramfs.img --reuse-cmdline && systemctl kexec","title":"Rebooting"},{"location":"guides/refind/","text":"Introduction \u00b6 This guide shall help you install the rEFInd Boot Manager in your T2 Mac in the safest possible way. Though there are various options to get rEFInd on your Mac, it is recommended to follow the instructions given below unless you know what you are doing. Installation \u00b6 All steps given here have to be performed on macOS . You will also need to have secure boot disabled . With the help of disk utility, create a 100-200MB MS-DOS FAT partition and label it as REFIND . Get a binary zip file of rEFInd from here . The binary zip file of rEFInd shall be available in the downloads folder by the name of refind-bin-<VERSION>.zip , where <VERSION> represents the version of rEFInd you have downloaded. For eg:- If you have downloaded 0.13.2 version, it will be available as refind-bin-0.13.2.zip . Now run the following in the terminal :- IDENTIFIER = $( diskutil info REFIND | grep \"Device Identifier\" | cut -d: -f2 | xargs ) cd ~/Downloads unzip refind-bin* rm refind-bin*.zip cd refind-bin* xattr -rd com.apple.quarantine . sed -i '' \"s/sed -i 's/sed -i '' 's/g\" refind-install diskutil unmount $IDENTIFIER sudo ./refind-install --usedefault /dev/ $IDENTIFIER diskutil unmount $IDENTIFIER diskutil mount $IDENTIFIER sudo rmdir /tmp/refind_install rm -r ~/Downloads/refind-bin* Now run:- bless --folder /Volumes/REFIND/EFI/BOOT --label rEFInd This will change the label in the Mac Startup Manager for rEFInd from EFI Boot to rEFInd . Configuration \u00b6 Though rEFInd has many configuration options, some basic configuration is required for a smoother experience on T2 Macs. Removing BIOS entries \u00b6 Macs with T2 chip cannot BIOS boot. So it is advised to remove the BIOS entries. For that, open finder, and then open the REFIND volume. Add the line given below at the end of EFI/BOOT/refind.conf file by editing it with a text editor. scanfor internal,external,optical,manual In case you face the error saying The document \u201crefind.conf\u201d could not be saved. , copy the refind.conf file to any place in your home directory (Downloads folder for example) and do the editing over there. After editing replace the refind.conf file in the REFIND volume with the newly edited file. Hiding text on booting an OS using rEFInd (Optional) \u00b6 In case you boot an OS other than macOS using rEFInd, it shows some debug text while booting it. In order to get a smooth boot experience simiar to the Mac Startup Manager, add the following line to EFI/BOOT/refind.conf , just as you did to remove BIOS entries. use_graphics_for osx,linux,windows,grub Preventing use of NVRAM (Likely to have been enabled already) \u00b6 Preventing use of NVRAM is must as T2 doesn\u2019t like someone to touch the NVRAM. In latest editions of rEFInd, preventing use of NVRAM is enabled by default. You may confirm this by checking presence of use_nvram false line somewhere in the middle of the refind.conf file (the one mentioned in above instructions). Make sure it is not commented (doesn\u2019t have a # before the line). If it is then remove the # . In case the line is missing, add it at the end of refind.conf file. In case the line use_nvram true is present instead, change true to false . Making rEFInd default at startup \u00b6 After correctly installing and configuring rEFInd, we need to make it boot by default on every startup. In order to do so, restart your Mac and press and hold down the Option (Alt) key. When the startup manager gets displayed, release the Option key. Now press and hold the Control key and without releasing the Control key, boot into the rEFInd startup disk . Now on every startup, rEFInd will get displayed by default. Warning This step has to be performed every time you update macOS to a newer version, as this makes the macOS startup disk as the default startup disk. Fixing blank screen on booting macOS using rEFInd \u00b6 Sometimes, while booting into macOS using rEFInd, users get stuck at a blank screen. This bug is observed only if you have performed a force/unsafe shutdown by pressing and holding the power button in the previous boot. Some users have also faced it in the first macOS boot using rEFInd on new rEFInd installations. In order to fix it, turn off your Mac and restart while holding down the Option (Alt) key. Release the Option key when the Mac Startup Manager gets displayed. Boot into macOS using the Mac Startup Manager. This shall fix the bug for subsequent boots. Using rEFInd as a replacement for GRUB, systemd-boot etc. \u00b6 By default, rEFInd boots Linux indirectly by booting GRUB, systemd-boot etc. But we can also boot linux directly by using rEFInd. This can be useful in situations where other bootloaders are causing issues. In order to do so, follow the following steps :- Boot into Linux using the bootloader currently in use. If the bootloader is facing issues, you may also chroot into the installation using your distro's ISO and run the commands within the chroot. Get a binary zip file of rEFInd from here . The binary zip file of rEFInd shall be available in the downloads folder by the name of refind-bin-<VERSION>.zip , where <VERSION> represents the version of rEFInd you have downloaded. For eg:- If you have downloaded 0.13.2 version, it will be available as refind-bin-0.13.2.zip . Move the zip into the /boot folder. If you are chrooting, the move the zip into the /boot folder of the chroot . Now run :- cd /boot sudo unzip refind-bin* sudo rm refind-bin*.zip cd refind-bin* sudo ./mkrlconf sudo sed -i 's/\"Boot to single-user mode\"/#\"Boot to single-user mode\"/g' /boot/refind_linux.conf sudo sed -i 's/\"Boot with minimal options\"/#\"Boot with minimal options\"/g' /boot/refind_linux.conf sudo rm -r /boot/refind-bin* A file named refind_linux.conf shall be made in your /boot folder of your installation. A sample of this is given below. \"Boot with standard options\" \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e\" #\"Boot to single-user mode\" \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e single\" #\"Boot with minimal options\" \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e\" Chroot If you have run the in step 5 commands within a chroot, the ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e shall likely to be missing. In this case, manually edit the refind_linux.conf file in the /boot folder of your chroot to look like the sample and replace the UUID ( 631c326a-fb48-46ba-b4aa-6dd2033fbb5e in the sample) with the one of the partition in which your Linux is installed. You can get the UUID from /etc/fstab file of your chroot or using a disk utility software. On the line with \"Boot with standard options\" , add the intel_iommu=on iommu=pt pcie_ports=compat efi=noruntime quiet splash parameters. It is possible that some parameters are already added. In such case, add only the missing parameters. If you don't want a silent boot, you may omit out the quiet splash parameter. Finally, the refind_linux.conf file should look something like this. \"Boot with standard options\" \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e intel_iommu=on iommu=pt pcie_ports=compat efi=noruntime quiet splash\" #\"Boot to single-user mode\" \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e single\" #\"Boot with minimal options\" \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e\" Now, when you shall be in rEFInd, it should show an entry with the path of the image of your kernel and shall most probably have the icon of the Linux Penguin. That entry shall be the one which shall boot Linux directly using rEFInd. If you want to use your distro's icon instead of Linux Penguin one, you may label the volume containing your kernel with the name of your distro. Following are some examples of commands for various filesystems, taking the distro as Ubuntu and partition in which kernel is in as /dev/nvme0n1p3 . ext2, ext3 or ext4 :- sudo tune2fs -L \"Ubuntu\" /dev/nvme0n1p3 btrfs :- MOUNTPOINT = $( findmnt -n -o TARGET /dev/nvme0n1p3 ) sudo btrfs filesystem label $MOUNTPOINT \"Ubuntu\" More ways to set custom icons are described here . Uninstalling rEFInd \u00b6 In case you wish to uninstall rEFInd, boot into macOS and follow the steps below :- Open the Disk Utility Select the partition on which macOS is installed (it generally has the label Macintosh HD until you have renamed it manually). Click on Partition . Select the REFIND partition and click - to remove it. Your macOS partition should expand to fill the space that rEFInd was in. Click on Apply . Disk Utility will remove the REFIND partition and expand your macOS partition. This may take a while, but do not interrupt this process . Change the default startup disk to the OS you wish to be boot by default. If the OS you wish is macOS or Windows , follow Apple's documentation where you have to follow the Change your startup disk for every startup section. If the OS you wish is Linux , follow the Startup Manager Guide . References and External links \u00b6 Reference - This guide has been inspired from here. rEFInd - Official website of rEFInd. Theming rEFInd - Useful guide to set custom themes for rEFInd.","title":"rEFInd"},{"location":"guides/refind/#introduction","text":"This guide shall help you install the rEFInd Boot Manager in your T2 Mac in the safest possible way. Though there are various options to get rEFInd on your Mac, it is recommended to follow the instructions given below unless you know what you are doing.","title":"Introduction"},{"location":"guides/refind/#installation","text":"All steps given here have to be performed on macOS . You will also need to have secure boot disabled . With the help of disk utility, create a 100-200MB MS-DOS FAT partition and label it as REFIND . Get a binary zip file of rEFInd from here . The binary zip file of rEFInd shall be available in the downloads folder by the name of refind-bin-<VERSION>.zip , where <VERSION> represents the version of rEFInd you have downloaded. For eg:- If you have downloaded 0.13.2 version, it will be available as refind-bin-0.13.2.zip . Now run the following in the terminal :- IDENTIFIER = $( diskutil info REFIND | grep \"Device Identifier\" | cut -d: -f2 | xargs ) cd ~/Downloads unzip refind-bin* rm refind-bin*.zip cd refind-bin* xattr -rd com.apple.quarantine . sed -i '' \"s/sed -i 's/sed -i '' 's/g\" refind-install diskutil unmount $IDENTIFIER sudo ./refind-install --usedefault /dev/ $IDENTIFIER diskutil unmount $IDENTIFIER diskutil mount $IDENTIFIER sudo rmdir /tmp/refind_install rm -r ~/Downloads/refind-bin* Now run:- bless --folder /Volumes/REFIND/EFI/BOOT --label rEFInd This will change the label in the Mac Startup Manager for rEFInd from EFI Boot to rEFInd .","title":"Installation"},{"location":"guides/refind/#configuration","text":"Though rEFInd has many configuration options, some basic configuration is required for a smoother experience on T2 Macs.","title":"Configuration"},{"location":"guides/refind/#removing-bios-entries","text":"Macs with T2 chip cannot BIOS boot. So it is advised to remove the BIOS entries. For that, open finder, and then open the REFIND volume. Add the line given below at the end of EFI/BOOT/refind.conf file by editing it with a text editor. scanfor internal,external,optical,manual In case you face the error saying The document \u201crefind.conf\u201d could not be saved. , copy the refind.conf file to any place in your home directory (Downloads folder for example) and do the editing over there. After editing replace the refind.conf file in the REFIND volume with the newly edited file.","title":"Removing BIOS entries"},{"location":"guides/refind/#hiding-text-on-booting-an-os-using-refind-optional","text":"In case you boot an OS other than macOS using rEFInd, it shows some debug text while booting it. In order to get a smooth boot experience simiar to the Mac Startup Manager, add the following line to EFI/BOOT/refind.conf , just as you did to remove BIOS entries. use_graphics_for osx,linux,windows,grub","title":"Hiding text on booting an OS using rEFInd (Optional)"},{"location":"guides/refind/#preventing-use-of-nvram-likely-to-have-been-enabled-already","text":"Preventing use of NVRAM is must as T2 doesn\u2019t like someone to touch the NVRAM. In latest editions of rEFInd, preventing use of NVRAM is enabled by default. You may confirm this by checking presence of use_nvram false line somewhere in the middle of the refind.conf file (the one mentioned in above instructions). Make sure it is not commented (doesn\u2019t have a # before the line). If it is then remove the # . In case the line is missing, add it at the end of refind.conf file. In case the line use_nvram true is present instead, change true to false .","title":"Preventing use of NVRAM (Likely to have been enabled already)"},{"location":"guides/refind/#making-refind-default-at-startup","text":"After correctly installing and configuring rEFInd, we need to make it boot by default on every startup. In order to do so, restart your Mac and press and hold down the Option (Alt) key. When the startup manager gets displayed, release the Option key. Now press and hold the Control key and without releasing the Control key, boot into the rEFInd startup disk . Now on every startup, rEFInd will get displayed by default. Warning This step has to be performed every time you update macOS to a newer version, as this makes the macOS startup disk as the default startup disk.","title":"Making rEFInd default at startup"},{"location":"guides/refind/#fixing-blank-screen-on-booting-macos-using-refind","text":"Sometimes, while booting into macOS using rEFInd, users get stuck at a blank screen. This bug is observed only if you have performed a force/unsafe shutdown by pressing and holding the power button in the previous boot. Some users have also faced it in the first macOS boot using rEFInd on new rEFInd installations. In order to fix it, turn off your Mac and restart while holding down the Option (Alt) key. Release the Option key when the Mac Startup Manager gets displayed. Boot into macOS using the Mac Startup Manager. This shall fix the bug for subsequent boots.","title":"Fixing blank screen on booting macOS using rEFInd"},{"location":"guides/refind/#using-refind-as-a-replacement-for-grub-systemd-boot-etc","text":"By default, rEFInd boots Linux indirectly by booting GRUB, systemd-boot etc. But we can also boot linux directly by using rEFInd. This can be useful in situations where other bootloaders are causing issues. In order to do so, follow the following steps :- Boot into Linux using the bootloader currently in use. If the bootloader is facing issues, you may also chroot into the installation using your distro's ISO and run the commands within the chroot. Get a binary zip file of rEFInd from here . The binary zip file of rEFInd shall be available in the downloads folder by the name of refind-bin-<VERSION>.zip , where <VERSION> represents the version of rEFInd you have downloaded. For eg:- If you have downloaded 0.13.2 version, it will be available as refind-bin-0.13.2.zip . Move the zip into the /boot folder. If you are chrooting, the move the zip into the /boot folder of the chroot . Now run :- cd /boot sudo unzip refind-bin* sudo rm refind-bin*.zip cd refind-bin* sudo ./mkrlconf sudo sed -i 's/\"Boot to single-user mode\"/#\"Boot to single-user mode\"/g' /boot/refind_linux.conf sudo sed -i 's/\"Boot with minimal options\"/#\"Boot with minimal options\"/g' /boot/refind_linux.conf sudo rm -r /boot/refind-bin* A file named refind_linux.conf shall be made in your /boot folder of your installation. A sample of this is given below. \"Boot with standard options\" \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e\" #\"Boot to single-user mode\" \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e single\" #\"Boot with minimal options\" \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e\" Chroot If you have run the in step 5 commands within a chroot, the ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e shall likely to be missing. In this case, manually edit the refind_linux.conf file in the /boot folder of your chroot to look like the sample and replace the UUID ( 631c326a-fb48-46ba-b4aa-6dd2033fbb5e in the sample) with the one of the partition in which your Linux is installed. You can get the UUID from /etc/fstab file of your chroot or using a disk utility software. On the line with \"Boot with standard options\" , add the intel_iommu=on iommu=pt pcie_ports=compat efi=noruntime quiet splash parameters. It is possible that some parameters are already added. In such case, add only the missing parameters. If you don't want a silent boot, you may omit out the quiet splash parameter. Finally, the refind_linux.conf file should look something like this. \"Boot with standard options\" \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e intel_iommu=on iommu=pt pcie_ports=compat efi=noruntime quiet splash\" #\"Boot to single-user mode\" \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e single\" #\"Boot with minimal options\" \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e\" Now, when you shall be in rEFInd, it should show an entry with the path of the image of your kernel and shall most probably have the icon of the Linux Penguin. That entry shall be the one which shall boot Linux directly using rEFInd. If you want to use your distro's icon instead of Linux Penguin one, you may label the volume containing your kernel with the name of your distro. Following are some examples of commands for various filesystems, taking the distro as Ubuntu and partition in which kernel is in as /dev/nvme0n1p3 . ext2, ext3 or ext4 :- sudo tune2fs -L \"Ubuntu\" /dev/nvme0n1p3 btrfs :- MOUNTPOINT = $( findmnt -n -o TARGET /dev/nvme0n1p3 ) sudo btrfs filesystem label $MOUNTPOINT \"Ubuntu\" More ways to set custom icons are described here .","title":"Using rEFInd as a replacement for GRUB, systemd-boot etc."},{"location":"guides/refind/#uninstalling-refind","text":"In case you wish to uninstall rEFInd, boot into macOS and follow the steps below :- Open the Disk Utility Select the partition on which macOS is installed (it generally has the label Macintosh HD until you have renamed it manually). Click on Partition . Select the REFIND partition and click - to remove it. Your macOS partition should expand to fill the space that rEFInd was in. Click on Apply . Disk Utility will remove the REFIND partition and expand your macOS partition. This may take a while, but do not interrupt this process . Change the default startup disk to the OS you wish to be boot by default. If the OS you wish is macOS or Windows , follow Apple's documentation where you have to follow the Change your startup disk for every startup section. If the OS you wish is Linux , follow the Startup Manager Guide .","title":"Uninstalling rEFInd"},{"location":"guides/refind/#references-and-external-links","text":"Reference - This guide has been inspired from here. rEFInd - Official website of rEFInd. Theming rEFInd - Useful guide to set custom themes for rEFInd.","title":"References and External links"},{"location":"guides/startup-manager/","text":"Introduction \u00b6 This guide shall help you perform 2 tasks. Firstly you shall be able to set the correct label for your Linux startup disk on Mac startup manager and replace the EFI Boot label, and give it an icon. Secondly you shall be able to make Linux startup disk as the default startup disk in case you wish to do so. The steps to perform the above tasks vary as per the way you have installed Linux, and thus check out the guide under the heading that applies to your case. Setting labels \u00b6 Setting label in case you are using the EFI partition available by default in Mac and are on a dual boot system \u00b6 In this case, boot into macOS, open a terminal window and run :- sudo diskutil mount disk0s1 bless --folder /Volumes/EFI/EFI/BOOT --label \"<YOUR DISTRO'S NAME>\" Replace <YOUR DISTRO'S NAME> with your distro's name. Eg :- If you are using Ubuntu, run :- sudo diskutil mount disk0s1 bless --folder /Volumes/EFI/EFI/BOOT --label \"Ubuntu\" Setting label in case you are using the same EFI partition for Windows and Linux \u00b6 More details about this can be found in the triple boot guide . In this case the Windows startup disk is used to boot both Windows and Linux. Thus, it is not recommended to set special labels for Linux as it may cause errors with the Windows startup disk. Setting label in case you are using a seperate EFI partition for Linux \u00b6 More details about this can be found in the triple boot guide . In this case, boot into macOS, open a terminal window and run :- IDENTIFIER = $( diskutil info <NAME OF SEPERATE EFI PARTITION> | grep \"Device Identifier\" | cut -d: -f2 | xargs ) sudo diskutil mount $IDENTIFIER bless --folder /Volumes/<NAME OF SEPERATE EFI PARTITION>/EFI/BOOT --label \"<YOUR DISTRO'S NAME>\" Replace <NAME OF SEPERATE EFI PARTITION> with the label you set using in the above triple boot guide and <YOUR DISTRO'S NAME> with your distro's name. Eg :- If you are using Ubuntu and you set the label to EFI2 , run :- IDENTIFIER = $( diskutil info EFI2 | grep \"Device Identifier\" | cut -d: -f2 | xargs ) sudo diskutil mount $IDENTIFIER bless --folder /Volumes/EFI2/EFI/BOOT --label \"Ubuntu\" Setting the boot option icons in macOS Startup Manager \u00b6 In case you are using the same EFI partition for Windows and Linux, then your Windows startup disk already has an icon. Thus you needn't set any boot icon. In other cases, put an icns image file with your desired icon in the top directory of the disk that the bootloader of the menu entry is on, and call it .VolumeIcon.icns . It will now appear as that disk's boot option's icon. Setting Linux startup disk as the default startup disk \u00b6 Warning In case you upgrade macOS to a newer version, the default startup disk gets changed to the macOS startup disk. Thus you will have to follow the instructions to make the Linux startup disk as default every time after you upgrade macOS. Case of common EFI partition for Windows and Linux \u00b6 In this case you will have to set the Windows startup disk as the default startup disk. It is recommended to follow Apple's documentation where you have to follow the Change your startup disk for every startup section. If this method is not working for you, then follow the instructions given in Case of seperate EFI partition for Linux as well as case of using the EFI partition available by default in Mac and are on a dual boot system section, where you have to consider the Windows startup disk as the Linux startup disk. Case of seperate EFI partition for Linux as well as case of using the EFI partition available by default in Mac and are on a dual boot system \u00b6 In these cases, start your Mac and press and hold down the Option key. When the startup manager gets displayed, release the option key. Now press and hold the Control key and without releasing the Control key, boot into the Linux startup disk as you usually do. This will make it the default startup disk.","title":"Startup Manager"},{"location":"guides/startup-manager/#introduction","text":"This guide shall help you perform 2 tasks. Firstly you shall be able to set the correct label for your Linux startup disk on Mac startup manager and replace the EFI Boot label, and give it an icon. Secondly you shall be able to make Linux startup disk as the default startup disk in case you wish to do so. The steps to perform the above tasks vary as per the way you have installed Linux, and thus check out the guide under the heading that applies to your case.","title":"Introduction"},{"location":"guides/startup-manager/#setting-labels","text":"","title":"Setting labels"},{"location":"guides/startup-manager/#setting-label-in-case-you-are-using-the-efi-partition-available-by-default-in-mac-and-are-on-a-dual-boot-system","text":"In this case, boot into macOS, open a terminal window and run :- sudo diskutil mount disk0s1 bless --folder /Volumes/EFI/EFI/BOOT --label \"<YOUR DISTRO'S NAME>\" Replace <YOUR DISTRO'S NAME> with your distro's name. Eg :- If you are using Ubuntu, run :- sudo diskutil mount disk0s1 bless --folder /Volumes/EFI/EFI/BOOT --label \"Ubuntu\"","title":"Setting label in case you are using the EFI partition available by default in Mac and are on a dual boot system"},{"location":"guides/startup-manager/#setting-label-in-case-you-are-using-the-same-efi-partition-for-windows-and-linux","text":"More details about this can be found in the triple boot guide . In this case the Windows startup disk is used to boot both Windows and Linux. Thus, it is not recommended to set special labels for Linux as it may cause errors with the Windows startup disk.","title":"Setting label in case you are using the same EFI partition for Windows and Linux"},{"location":"guides/startup-manager/#setting-label-in-case-you-are-using-a-seperate-efi-partition-for-linux","text":"More details about this can be found in the triple boot guide . In this case, boot into macOS, open a terminal window and run :- IDENTIFIER = $( diskutil info <NAME OF SEPERATE EFI PARTITION> | grep \"Device Identifier\" | cut -d: -f2 | xargs ) sudo diskutil mount $IDENTIFIER bless --folder /Volumes/<NAME OF SEPERATE EFI PARTITION>/EFI/BOOT --label \"<YOUR DISTRO'S NAME>\" Replace <NAME OF SEPERATE EFI PARTITION> with the label you set using in the above triple boot guide and <YOUR DISTRO'S NAME> with your distro's name. Eg :- If you are using Ubuntu and you set the label to EFI2 , run :- IDENTIFIER = $( diskutil info EFI2 | grep \"Device Identifier\" | cut -d: -f2 | xargs ) sudo diskutil mount $IDENTIFIER bless --folder /Volumes/EFI2/EFI/BOOT --label \"Ubuntu\"","title":"Setting label in case you are using a seperate EFI partition for Linux"},{"location":"guides/startup-manager/#setting-the-boot-option-icons-in-macos-startup-manager","text":"In case you are using the same EFI partition for Windows and Linux, then your Windows startup disk already has an icon. Thus you needn't set any boot icon. In other cases, put an icns image file with your desired icon in the top directory of the disk that the bootloader of the menu entry is on, and call it .VolumeIcon.icns . It will now appear as that disk's boot option's icon.","title":"Setting the boot option icons in macOS Startup Manager"},{"location":"guides/startup-manager/#setting-linux-startup-disk-as-the-default-startup-disk","text":"Warning In case you upgrade macOS to a newer version, the default startup disk gets changed to the macOS startup disk. Thus you will have to follow the instructions to make the Linux startup disk as default every time after you upgrade macOS.","title":"Setting Linux startup disk as the default startup disk"},{"location":"guides/startup-manager/#case-of-common-efi-partition-for-windows-and-linux","text":"In this case you will have to set the Windows startup disk as the default startup disk. It is recommended to follow Apple's documentation where you have to follow the Change your startup disk for every startup section. If this method is not working for you, then follow the instructions given in Case of seperate EFI partition for Linux as well as case of using the EFI partition available by default in Mac and are on a dual boot system section, where you have to consider the Windows startup disk as the Linux startup disk.","title":"Case of common EFI partition for Windows and Linux"},{"location":"guides/startup-manager/#case-of-seperate-efi-partition-for-linux-as-well-as-case-of-using-the-efi-partition-available-by-default-in-mac-and-are-on-a-dual-boot-system","text":"In these cases, start your Mac and press and hold down the Option key. When the startup manager gets displayed, release the option key. Now press and hold the Control key and without releasing the Control key, boot into the Linux startup disk as you usually do. This will make it the default startup disk.","title":"Case of seperate EFI partition for Linux as well as case of using the EFI partition available by default in Mac and are on a dual boot system"},{"location":"guides/uninstall/","text":"Introduction \u00b6 This page explains how to remove Linux from your Mac. It shouldn't matter what distro you are using. Removing Linux partitions \u00b6 You may want to do this from macOS Recovery as you will be resizing (expanding) your startup disk, although you don't need to. In macOS open Disk Utility Click \"View\" then \"Show all devices\" Select your Apple SSD Click \"Partition\". If it suggests adding volumes, don't. Select your Linux partition, and click - to remove it. Your macOS partition should expand to fill the space that Linux was in. Click apply. Disk Utility will remove your Linux partition and expand your macOS partition. This may take a while, but do not interrupt this process . While it does this, consider the fact that you didn't need admin to remove your Linux partition. Removing the Linux boot-loader \u00b6 If using a separate EFI partition \u00b6 Follow the same steps to remove the seperate EFI partition as you followed to remove the Linux partition. If using the EFI partition already available in your Mac. \u00b6 In macOS run sudo diskutil mount disk0s1 , which mounts your EFI System Partition. There will now be an EFI disk visible in Finder, open it and go into the EFI folder (within the EFI disk). Remove any folders other than Apple , Boot , or Microsoft . Enter the Boot folder and remove bootx64.efi . If you have Windows installed with Bootcamp, Enter Microsoft folder and then the Boot folder inside the Microsoft folder and copy bootmgfw.efi . Paste it in that Boot folder in the EFI folder of the EFI disk from where you had deleted bootx64.efi . Now rename the newly copied bootmgfw.efi to bootx64.efi . Be careful not to delete the Windows bootloader. Enable Secure Boot (Optional) \u00b6 Boot to macOS Recovery by holding \u2318-R as you turn your Mac on. Enable Secure Boot as described here .","title":"Uninstall"},{"location":"guides/uninstall/#introduction","text":"This page explains how to remove Linux from your Mac. It shouldn't matter what distro you are using.","title":"Introduction"},{"location":"guides/uninstall/#removing-linux-partitions","text":"You may want to do this from macOS Recovery as you will be resizing (expanding) your startup disk, although you don't need to. In macOS open Disk Utility Click \"View\" then \"Show all devices\" Select your Apple SSD Click \"Partition\". If it suggests adding volumes, don't. Select your Linux partition, and click - to remove it. Your macOS partition should expand to fill the space that Linux was in. Click apply. Disk Utility will remove your Linux partition and expand your macOS partition. This may take a while, but do not interrupt this process . While it does this, consider the fact that you didn't need admin to remove your Linux partition.","title":"Removing Linux partitions"},{"location":"guides/uninstall/#removing-the-linux-boot-loader","text":"","title":"Removing the Linux boot-loader"},{"location":"guides/uninstall/#if-using-a-separate-efi-partition","text":"Follow the same steps to remove the seperate EFI partition as you followed to remove the Linux partition.","title":"If using a separate EFI partition"},{"location":"guides/uninstall/#if-using-the-efi-partition-already-available-in-your-mac","text":"In macOS run sudo diskutil mount disk0s1 , which mounts your EFI System Partition. There will now be an EFI disk visible in Finder, open it and go into the EFI folder (within the EFI disk). Remove any folders other than Apple , Boot , or Microsoft . Enter the Boot folder and remove bootx64.efi . If you have Windows installed with Bootcamp, Enter Microsoft folder and then the Boot folder inside the Microsoft folder and copy bootmgfw.efi . Paste it in that Boot folder in the EFI folder of the EFI disk from where you had deleted bootx64.efi . Now rename the newly copied bootmgfw.efi to bootx64.efi . Be careful not to delete the Windows bootloader.","title":"If using the EFI partition already available in your Mac."},{"location":"guides/uninstall/#enable-secure-boot-optional","text":"Boot to macOS Recovery by holding \u2318-R as you turn your Mac on. Enable Secure Boot as described here .","title":"Enable Secure Boot (Optional)"},{"location":"guides/wifi/","text":"Introduction \u00b6 This page is a step by step guide to get wifi working on T2 Macs. Ensure Kernel Supports OTP Firmware Selection \u00b6 Check if this command outputs any lines: modinfo brcmfmac | grep 4387 If it doesn't output anything, then upgrade your kernel (better option), or follow this older Wi-Fi guide . Refer to the \"Updating Kernel\" section on your distro's FAQ for instructions if you need to update your kernel: Arch Fedora Manjaro Ubuntu Setting up \u00b6 We now use a script which can help you set up Wi-Fi. Follow the instructions below to use this script :- On macOS \u00b6 Click here to download the script. Boot into macOS. Run this script there. When the script shall run successfully, it shall ask you to follow either of the two options mentioned in the On Linux section, on Linux. Boot into Linux. On Linux \u00b6 You have two options here. You can follow either of the two, its purely based on your choice: The first is to either copy this script to Linux via a USB, download it if you have a wired internet connection, or use some other method to get it to Linux. You can then run the script again from Linux and it will finish setting up Wi-Fi. The second method is to simply run the following commands on Linux :- sudo umount /dev/nvme0n1p1 sudo mkdir /tmp/apple-wifi-efi sudo mount /dev/nvme0n1p1 /tmp/apple-wifi-efi bash /tmp/apple-wifi-efi/wifi.sh For those who don\u2019t know how to run a script \u00b6 If you don\u2019t know how to run a script, follow these instructions. Boot into macOS, and download the script. Make sure the script is there in your Downloads folder. Open the terminal and run :- bash ~/Downloads/wifi.sh Then boot into Linux and place the same script in the Downloads folder over there or simply run the commands the script asked you to run in Linux when you executed it in macOS. If you placed the script in the Downloads folder instead of running the commands told by the script in macOS, run step 2 command on the terminal, this time in Linux. Else you needn't follow this step. Testing Firmware \u00b6 You can check the logs to confirm correct loading of the firmware using sudo journalctl -k --grep=brcmfmac , the output should look similar to this Dec 24 22:34:19 hostname kernel: usbcore: registered new interface driver brcmfmac Dec 24 22:34:19 hostname kernel: brcmfmac 0000:01:00.0: enabling device (0000 -> 0002) Dec 24 22:34:20 hostname kernel: brcmfmac: brcmf_fw_alloc_request: using brcm/brcmfmac4377b3-pcie for chip BCM4377/4 Dec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0: Direct firmware load for brcm/brcmfmac4377b3-pcie.apple,tahiti-SPPR-m-3.1-X0.bin failed with error -2 Dec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0: Direct firmware load for brcm/brcmfmac4377b3-pcie.apple,tahiti-SPPR-m-3.1.bin failed with error -2 Dec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0: Direct firmware load for brcm/brcmfmac4377b3-pcie.apple,tahiti-SPPR-m.bin failed with error -2 Dec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0: Direct firmware load for brcm/brcmfmac4377b3-pcie.apple,tahiti-SPPR.bin failed with error -2 Dec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0: Direct firmware load for brcm/brcmfmac4377b3-pcie.apple,tahiti-X0.bin failed with error -2 Dec 24 22:34:20 hostname kernel: brcmfmac: brcmf_c_process_txcap_blob: TxCap blob found, loading Dec 24 22:34:20 hostname kernel: brcmfmac: brcmf_c_preinit_dcmds: Firmware: BCM4377/4 wl0: Jul 16 2021 18:25:13 version 16.20.328.0.3.6.105 FWID 01-30be2b3a Dec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0 wlp1s0f0: renamed from wlan0 Fixing no Wi-Fi networks in scan list on Ubuntu \u00b6 We have been receiving a lot of complains where users are not getting even a single Wi-Fi network listed when attempting to connect to a network, inspite of having followed the Wi-Fi guide completely and correctly on Ubuntu . To fix this :- Edit /etc/NetworkManager/NetworkManager.conf to look like this :- [main] plugins=ifupdown,keyfile [ifupdown] managed=false [device] wifi.scan-rand-mac-address=no Now edit /etc/NetworkManager/conf.d/wifi_backend.conf to look like this #[device] #wifi.backend=iwd Finally run sudo systemctl restart NetworkManager . Fixing unstable WPA2 using iwd \u00b6 Using iwd is technically not needed for using wifi. But if your are facing unstable WPA2 issues and have to follow step 1 of the above section every time you connect to a WPA2 network, you will have to follow this section. If your connection is stable, you needn't follow this section. Instructions in this section might be different for the distribution that you are trying to install. To get WPA2 to work stably, install the iwd package (for example sudo apt install iwd on Ubuntu). Edit /etc/NetworkManager/NetworkManager.conf to look like the following: [device] wifi.backend = iwd Set iwd to run on boot with the following commands (assuming that you are using systemd). sudo systemctl enable --now iwd sudo systemctl restart NetworkManager If you wifi disconnects or has issues otherwise its advised to restart iwd: sudo systemctl restart iwd , or reprobe the wifi kernel module: sudo modprobe -r brcmfmac && sudo modprobe brcmfmac .","title":"Wi-Fi"},{"location":"guides/wifi/#introduction","text":"This page is a step by step guide to get wifi working on T2 Macs.","title":"Introduction"},{"location":"guides/wifi/#ensure-kernel-supports-otp-firmware-selection","text":"Check if this command outputs any lines: modinfo brcmfmac | grep 4387 If it doesn't output anything, then upgrade your kernel (better option), or follow this older Wi-Fi guide . Refer to the \"Updating Kernel\" section on your distro's FAQ for instructions if you need to update your kernel: Arch Fedora Manjaro Ubuntu","title":"Ensure Kernel Supports OTP Firmware Selection"},{"location":"guides/wifi/#setting-up","text":"We now use a script which can help you set up Wi-Fi. Follow the instructions below to use this script :-","title":"Setting up"},{"location":"guides/wifi/#on-macos","text":"Click here to download the script. Boot into macOS. Run this script there. When the script shall run successfully, it shall ask you to follow either of the two options mentioned in the On Linux section, on Linux. Boot into Linux.","title":"On macOS"},{"location":"guides/wifi/#on-linux","text":"You have two options here. You can follow either of the two, its purely based on your choice: The first is to either copy this script to Linux via a USB, download it if you have a wired internet connection, or use some other method to get it to Linux. You can then run the script again from Linux and it will finish setting up Wi-Fi. The second method is to simply run the following commands on Linux :- sudo umount /dev/nvme0n1p1 sudo mkdir /tmp/apple-wifi-efi sudo mount /dev/nvme0n1p1 /tmp/apple-wifi-efi bash /tmp/apple-wifi-efi/wifi.sh","title":"On Linux"},{"location":"guides/wifi/#for-those-who-dont-know-how-to-run-a-script","text":"If you don\u2019t know how to run a script, follow these instructions. Boot into macOS, and download the script. Make sure the script is there in your Downloads folder. Open the terminal and run :- bash ~/Downloads/wifi.sh Then boot into Linux and place the same script in the Downloads folder over there or simply run the commands the script asked you to run in Linux when you executed it in macOS. If you placed the script in the Downloads folder instead of running the commands told by the script in macOS, run step 2 command on the terminal, this time in Linux. Else you needn't follow this step.","title":"For those who don\u2019t know how to run a script"},{"location":"guides/wifi/#testing-firmware","text":"You can check the logs to confirm correct loading of the firmware using sudo journalctl -k --grep=brcmfmac , the output should look similar to this Dec 24 22:34:19 hostname kernel: usbcore: registered new interface driver brcmfmac Dec 24 22:34:19 hostname kernel: brcmfmac 0000:01:00.0: enabling device (0000 -> 0002) Dec 24 22:34:20 hostname kernel: brcmfmac: brcmf_fw_alloc_request: using brcm/brcmfmac4377b3-pcie for chip BCM4377/4 Dec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0: Direct firmware load for brcm/brcmfmac4377b3-pcie.apple,tahiti-SPPR-m-3.1-X0.bin failed with error -2 Dec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0: Direct firmware load for brcm/brcmfmac4377b3-pcie.apple,tahiti-SPPR-m-3.1.bin failed with error -2 Dec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0: Direct firmware load for brcm/brcmfmac4377b3-pcie.apple,tahiti-SPPR-m.bin failed with error -2 Dec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0: Direct firmware load for brcm/brcmfmac4377b3-pcie.apple,tahiti-SPPR.bin failed with error -2 Dec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0: Direct firmware load for brcm/brcmfmac4377b3-pcie.apple,tahiti-X0.bin failed with error -2 Dec 24 22:34:20 hostname kernel: brcmfmac: brcmf_c_process_txcap_blob: TxCap blob found, loading Dec 24 22:34:20 hostname kernel: brcmfmac: brcmf_c_preinit_dcmds: Firmware: BCM4377/4 wl0: Jul 16 2021 18:25:13 version 16.20.328.0.3.6.105 FWID 01-30be2b3a Dec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0 wlp1s0f0: renamed from wlan0","title":"Testing Firmware"},{"location":"guides/wifi/#fixing-no-wi-fi-networks-in-scan-list-on-ubuntu","text":"We have been receiving a lot of complains where users are not getting even a single Wi-Fi network listed when attempting to connect to a network, inspite of having followed the Wi-Fi guide completely and correctly on Ubuntu . To fix this :- Edit /etc/NetworkManager/NetworkManager.conf to look like this :- [main] plugins=ifupdown,keyfile [ifupdown] managed=false [device] wifi.scan-rand-mac-address=no Now edit /etc/NetworkManager/conf.d/wifi_backend.conf to look like this #[device] #wifi.backend=iwd Finally run sudo systemctl restart NetworkManager .","title":"Fixing no Wi-Fi networks in scan list on Ubuntu"},{"location":"guides/wifi/#fixing-unstable-wpa2-using-iwd","text":"Using iwd is technically not needed for using wifi. But if your are facing unstable WPA2 issues and have to follow step 1 of the above section every time you connect to a WPA2 network, you will have to follow this section. If your connection is stable, you needn't follow this section. Instructions in this section might be different for the distribution that you are trying to install. To get WPA2 to work stably, install the iwd package (for example sudo apt install iwd on Ubuntu). Edit /etc/NetworkManager/NetworkManager.conf to look like the following: [device] wifi.backend = iwd Set iwd to run on boot with the following commands (assuming that you are using systemd). sudo systemctl enable --now iwd sudo systemctl restart NetworkManager If you wifi disconnects or has issues otherwise its advised to restart iwd: sudo systemctl restart iwd , or reprobe the wifi kernel module: sudo modprobe -r brcmfmac && sudo modprobe brcmfmac .","title":"Fixing unstable WPA2 using iwd"},{"location":"guides/windows/","text":"Introduction \u00b6 This page is a guide on getting Windows and Linux both installed. Secure Boot Must be disabled from macOS recovery. If you want to be able to choose from macOS, Windows, or Linux in the Startup Manager (the menu you get by holding \u2325 key), goto 'Using seperate EFI partitions'. If you just want to select between Linux and Windows in the GRUB bootloader, goto 'Using the same EFI partition'. The simplist way to triple boot is to install Windows first, and install linux on the same EFI partition, so that the Windows option in Startup Manager will let you pick Linux or Windows. To do that, follow the first set of instructions here. Using the same EFI partition \u00b6 If Windows is installed first \u00b6 Install linux normally, with a patched kernel and dkms modules (this is probably done for you if you are using an installer specific to t2 macs). Put your bootloader on /dev/nvme0n1p1 , which should be set to mount at /boot/efi . Once it installs the bootloader, the Windows entry in startup manager will boot linux. Fix blank screen issue that may occur when booting Windows (Credits to gbrow004 for documenting this fix on his Gist ). Open a terminal and type in sudo gdisk /dev/nvme0n1 . Press x for expert mode Press n to create a protective MBR Press w to write the partition and y to confirm If gdisk doesn't quit, press q to exit the command Enable the GRUB menu so that you'll have time to pick Windows Boot into your linux install by selecting the Windows option in startup manager. Edit /etc/default/grub with any preferred editior (nano/vim/) and with sudo. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . If you are using nano , save the file by doing CTRL+X, Y, then enter. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished. You should now be able to boot either Windows or Linux from the GRUB bootloader. If Linux is installed first \u00b6 Make sure that your linux partitions are not labled as Microsoft Basic Data , if they are, Bootcamp Assistant will think Windows is already installed. To fix this, go to Linux and do sudo cfdisk /dev/nvme0n1 and change the type of your linux partitions to Linux Filesystem . Install Windows normaly with Bootcamp. Windows will replace your Linux boot option. Boot into macOS. sudo diskutil mount disk0s1 Go to /Volumes/EFI/efi In this folder there will be a Microsoft folder, an Apple folder, one with your distro's name or just GRUB , and one called Boot . The Boot folder will have a file named bootx64.efi , rename this to windows_bootx64.efi Copy the grubx64.efi file in your distro's folder to /Volumes/EFI/efi/Boot/bootx64.efi . The the Windows option in Startup Manager will now boot Linux. Fix blank screen issue that may occur when booting Windows (Credits to gbrow004 for documenting this fix on his Gist ). In Linux, open a terminal and type in sudo gdisk /dev/nvme0n1 . Press x for expert mode Press n to create a protective MBR Press w to write the partition and y to confirm If gdisk doesn't quit, press q to exit the command Enable the GRUB menu so that you'll have time to pick Windows Boot into your linux install by selecting the Windows option in startup manager. Edit /etc/default/grub with any preferred editior (nano/vim/) and with sudo. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . If you are using nano , save the file by doing CTRL+X, Y, then enter. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished. You should now be able to boot either Windows or Linux from the GRUB bootloader. It may be possible to skip steps 5-8 by doing the following command in macOS: sudo sh -c \"bless --mount /Volumes/EFI --setBoot --file /Volumes/EFI/efi/$(ls /Volumes/EFI/efi|grep -i -e microsoft -e boot -e apple -v)/grubx64.efi --shortform\" This might not prevent step 8 from being needed. Using seperate EFI partitions \u00b6 Installing Linux (With or without Windows already installed) \u00b6 In macOS \u00b6 Create partitions with Disk Utility: Make a 200Mb FAT32 partition, call it something like EFI2 . Make sure there is no space in the label else you may face issues with the Startup Manager guide . Eg:- Do not use EFI 2 . Also do not use EFI as the label. Create your main partition(s) for Linux, make them macOS Extended/HFS+ to stop Bootcamp Installer from thinking they are Windows. These will be erased and reformatted by your installer. In your distro's installer \u00b6 If you are using an interactive installer: Set the EFI2 partition to be mounted at /boot/efi and set it as \"ESP\"/\"Boot\"/\"EFI System Partition\". Don't use the partition labeled EFI located at /dev/nvme0n1p1 , to avoid breaking the Windows bootloader stored there. Ensure that /dev/nvme0n1p1 wasn't set by default to be used as the \"EFI System Partition\". Ubuntu On Ubuntu you will need to right click on nvme0n1p1 , click edit/change, and set it as \"Do not use this partition\". Then you can set /boot/efi as the mount point for the EFI2 partition. Your main partition that were formatted as macOS Extended/HFS+ can be mounted at / . If it fails to install the bootloader, open a terminal: Use lsblk or mount to find where your install's root partition is installed chroot $that_partitions_mount_point_here grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable There will now be an EFI Boot option in the macOS Startup Manager (The menu you get by holding option at boot) which will boot Linux. Once you've booted into linux, ensure that /dev/nvme0n1p1 is not mounted. (i.e. by checking the output of lsblk or using a disk utility program.) If it is, then edit /etc/fstab and remove it. Restart and it should no longer be mounted. If you want a more descriptive guide regarding this, go here . If you are doing it manually: Format the main Linux partition(s) as ext4, btrfs, or whatever you intend to use. Mount your partitions, put the EFI2 one at /boot/efi within your chroot. Install normally up until you install your bootloader, but don't forget to get a patched kernel and the correct dkms modules Within your chroot, do grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable There will now be an EFI Boot option in the macOS Startup Manager (The menu you get by holding option at boot) which will boot Linux. Installing Windows when Linux is installed \u00b6 If there are partitions labeled as Microsoft Basic Data , Bootcamp Assistant will think you have Windows installed. Use sudo cfdisk /dev/nvme0n1 to change your Linux partitions to Linux Filesystem or whatever is appropriate. If your second EFI partition is labeled as EFI System , you'll need to use cfdisk again to make it not that, as the Windows installer fails if there are two. Bootcamp should install Windows normally. If you put your Linux bootloader on /dev/nvme0n1p1 , Windows will replace it, and that's why a second EFI partition is ideal.","title":"Windows Triple Boot"},{"location":"guides/windows/#introduction","text":"This page is a guide on getting Windows and Linux both installed. Secure Boot Must be disabled from macOS recovery. If you want to be able to choose from macOS, Windows, or Linux in the Startup Manager (the menu you get by holding \u2325 key), goto 'Using seperate EFI partitions'. If you just want to select between Linux and Windows in the GRUB bootloader, goto 'Using the same EFI partition'. The simplist way to triple boot is to install Windows first, and install linux on the same EFI partition, so that the Windows option in Startup Manager will let you pick Linux or Windows. To do that, follow the first set of instructions here.","title":"Introduction"},{"location":"guides/windows/#using-the-same-efi-partition","text":"","title":"Using the same EFI partition"},{"location":"guides/windows/#if-windows-is-installed-first","text":"Install linux normally, with a patched kernel and dkms modules (this is probably done for you if you are using an installer specific to t2 macs). Put your bootloader on /dev/nvme0n1p1 , which should be set to mount at /boot/efi . Once it installs the bootloader, the Windows entry in startup manager will boot linux. Fix blank screen issue that may occur when booting Windows (Credits to gbrow004 for documenting this fix on his Gist ). Open a terminal and type in sudo gdisk /dev/nvme0n1 . Press x for expert mode Press n to create a protective MBR Press w to write the partition and y to confirm If gdisk doesn't quit, press q to exit the command Enable the GRUB menu so that you'll have time to pick Windows Boot into your linux install by selecting the Windows option in startup manager. Edit /etc/default/grub with any preferred editior (nano/vim/) and with sudo. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . If you are using nano , save the file by doing CTRL+X, Y, then enter. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished. You should now be able to boot either Windows or Linux from the GRUB bootloader.","title":"If Windows is installed first"},{"location":"guides/windows/#if-linux-is-installed-first","text":"Make sure that your linux partitions are not labled as Microsoft Basic Data , if they are, Bootcamp Assistant will think Windows is already installed. To fix this, go to Linux and do sudo cfdisk /dev/nvme0n1 and change the type of your linux partitions to Linux Filesystem . Install Windows normaly with Bootcamp. Windows will replace your Linux boot option. Boot into macOS. sudo diskutil mount disk0s1 Go to /Volumes/EFI/efi In this folder there will be a Microsoft folder, an Apple folder, one with your distro's name or just GRUB , and one called Boot . The Boot folder will have a file named bootx64.efi , rename this to windows_bootx64.efi Copy the grubx64.efi file in your distro's folder to /Volumes/EFI/efi/Boot/bootx64.efi . The the Windows option in Startup Manager will now boot Linux. Fix blank screen issue that may occur when booting Windows (Credits to gbrow004 for documenting this fix on his Gist ). In Linux, open a terminal and type in sudo gdisk /dev/nvme0n1 . Press x for expert mode Press n to create a protective MBR Press w to write the partition and y to confirm If gdisk doesn't quit, press q to exit the command Enable the GRUB menu so that you'll have time to pick Windows Boot into your linux install by selecting the Windows option in startup manager. Edit /etc/default/grub with any preferred editior (nano/vim/) and with sudo. Change line GRUB_TIMEOUT_STYLE to GRUB_TIMEOUT_STYLE=MENU . If you are using nano , save the file by doing CTRL+X, Y, then enter. We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in sudo update-grub and hit enter. After the command is done, you're finished. You should now be able to boot either Windows or Linux from the GRUB bootloader. It may be possible to skip steps 5-8 by doing the following command in macOS: sudo sh -c \"bless --mount /Volumes/EFI --setBoot --file /Volumes/EFI/efi/$(ls /Volumes/EFI/efi|grep -i -e microsoft -e boot -e apple -v)/grubx64.efi --shortform\" This might not prevent step 8 from being needed.","title":"If Linux is installed first"},{"location":"guides/windows/#using-seperate-efi-partitions","text":"","title":"Using seperate EFI partitions"},{"location":"guides/windows/#installing-linux-with-or-without-windows-already-installed","text":"","title":"Installing Linux (With or without Windows already installed)"},{"location":"guides/windows/#in-macos","text":"Create partitions with Disk Utility: Make a 200Mb FAT32 partition, call it something like EFI2 . Make sure there is no space in the label else you may face issues with the Startup Manager guide . Eg:- Do not use EFI 2 . Also do not use EFI as the label. Create your main partition(s) for Linux, make them macOS Extended/HFS+ to stop Bootcamp Installer from thinking they are Windows. These will be erased and reformatted by your installer.","title":"In macOS"},{"location":"guides/windows/#in-your-distros-installer","text":"If you are using an interactive installer: Set the EFI2 partition to be mounted at /boot/efi and set it as \"ESP\"/\"Boot\"/\"EFI System Partition\". Don't use the partition labeled EFI located at /dev/nvme0n1p1 , to avoid breaking the Windows bootloader stored there. Ensure that /dev/nvme0n1p1 wasn't set by default to be used as the \"EFI System Partition\". Ubuntu On Ubuntu you will need to right click on nvme0n1p1 , click edit/change, and set it as \"Do not use this partition\". Then you can set /boot/efi as the mount point for the EFI2 partition. Your main partition that were formatted as macOS Extended/HFS+ can be mounted at / . If it fails to install the bootloader, open a terminal: Use lsblk or mount to find where your install's root partition is installed chroot $that_partitions_mount_point_here grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable There will now be an EFI Boot option in the macOS Startup Manager (The menu you get by holding option at boot) which will boot Linux. Once you've booted into linux, ensure that /dev/nvme0n1p1 is not mounted. (i.e. by checking the output of lsblk or using a disk utility program.) If it is, then edit /etc/fstab and remove it. Restart and it should no longer be mounted. If you want a more descriptive guide regarding this, go here . If you are doing it manually: Format the main Linux partition(s) as ext4, btrfs, or whatever you intend to use. Mount your partitions, put the EFI2 one at /boot/efi within your chroot. Install normally up until you install your bootloader, but don't forget to get a patched kernel and the correct dkms modules Within your chroot, do grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable There will now be an EFI Boot option in the macOS Startup Manager (The menu you get by holding option at boot) which will boot Linux.","title":"In your distro's installer"},{"location":"guides/windows/#installing-windows-when-linux-is-installed","text":"If there are partitions labeled as Microsoft Basic Data , Bootcamp Assistant will think you have Windows installed. Use sudo cfdisk /dev/nvme0n1 to change your Linux partitions to Linux Filesystem or whatever is appropriate. If your second EFI partition is labeled as EFI System , you'll need to use cfdisk again to make it not that, as the Windows installer fails if there are two. Bootcamp should install Windows normally. If you put your Linux bootloader on /dev/nvme0n1p1 , Windows will replace it, and that's why a second EFI partition is ideal.","title":"Installing Windows when Linux is installed"}]}